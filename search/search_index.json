{"docs":[{"location":"/appendix-02/index.html","text":"","title":"附录 2"},{"location":"/appendix-02/index.html#附录-2","text":"TODO","title":"附录 2"},{"location":"/index.html","text":"目录 第1章——探索Scala 第2章——体验Scala 第3章——从Java到Scala 第4章——善用对象 第5章——善用类型 第6章——函数值和闭包 第7章——特质 第8章——集合 第9章——模式匹配和正则表达式 第10章——处理异常 第11章——递归编程 第12章——惰性求值和并行集合 第13章——使用Actor模型处理并发 第14章——和Java进行互操作 第15章——使用Scala创建应用程序 第16章——单元测试\n《Scala 实用指南》\n一本写给Java开发者的Scala快速入门书。","title":""},{"location":"/contents.html","text":"","title":"目录 ·"},{"location":"/contents.html#目录","text":"","title":"目录"},{"location":"/chapter-01/index.html","text":"","title":"第1章——探索Scala ·"},{"location":"/chapter-01/index.html#第1章-探索scala","text":"","title":"第1章——探索Scala"},{"location":"/chapter-01/index.html#代码清单1-1","text":"val symbols = List(\"AMD\", \"AAPL\", \"AMZN\", \"IBM\", \"ORCL\", \"MSFT\")\nval year = 2014\n\nval (topStock, topPrice) =\n  symbols.map { ticker ⇒ (ticker, getYearEndClosingPrice(ticker, year)) }\n    .maxBy { stockPrice ⇒ stockPrice._2 }\n\nprintf(s\"Top stock of $year is $topStock closing at price $$$topPrice\")","title":"代码清单1-1"},{"location":"/chapter-01/index.html#代码清单1-2","text":"def getYearEndClosingPrice(symbol: String, year: Int) = {\n  val url = s\"http://ichart.finance.yahoo.com/table.csv?s=\" +\n    s\"$symbol&a=11&b=01&c=$year&d=11&e=31&f=$year&g=m\"\n\n  val data = io.Source.fromURL(url).mkString\n  val price = data.split(\"\\n\")(1).split(\",\")(4).toDouble\n  price\n}\n运行结果\nTop stock of 2014 is AMZN closing at price $310.35","title":"代码清单1-2"},{"location":"/chapter-01/index.html#代码清单1-3","text":"symbols.par.map { ticker ⇒ (ticker, getYearEndClosingPrice(ticker, year)) }\n  .maxBy { stockPrice ⇒ stockPrice._2 }\n编译sample.scala的结果\nsample.scala:2:\nerror: type mismatch;\n found   : String(\"haha\")\n required: Int\ni = \"haha\" //Error\n    ^\none error found","title":"代码清单1-3"},{"location":"/chapter-01/index.html#代码清单1-4","text":"public static int findMax(List<Integer> temperatures) {\n     //Java code\n  int highTemperature = Integer.MIN_VALUE;\n  for(int temperature : temperatures) {\n   highTemperature = Math.max(highTemperature, temperature);\n  }\n  return highTemperature;\n}","title":"代码清单1-4"},{"location":"/chapter-01/index.html#代码清单1-5","text":"def findMax(temperatures: List[Int]) = {\n  var highTemperature = Integer.MIN_VALUE\n  for (temperature ← temperatures) {\n    highTemperature = Math.max(highTemperature, temperature)\n  }\n  highTemperature\n}","title":"代码清单1-5"},{"location":"/chapter-01/index.html#代码清单1-6","text":"def findMax(temperatures: List[Int]) = {\n  temperatures.foldLeft(Integer.MIN_VALUE) { Math.max }\n}","title":"代码清单1-6"},{"location":"/chapter-01/index.html#代码清单1-6","text":"val values = List(1, 2, 3, 4, 5)\n\nval doubleValues = values.map(_ * 2)","title":"代码清单1-6"},{"location":"/chapter-02/index.html","text":"","title":"第2章——体验Scala ·"},{"location":"/chapter-02/index.html#第2章-体验scala","text":"","title":"第2章——体验Scala"},{"location":"/chapter-02/index.html#代码清单2-1","text":"Welcome to Scala 2.12.4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_151).\nType in expressions for evaluation. Or try :help.\n\nscala>","title":"代码清单2-1"},{"location":"/chapter-02/index.html#代码清单2-2","text":"scala> val number = 6\nnumber: Int = 6","title":"代码清单2-2"},{"location":"/chapter-02/index.html#代码清单2-3","text":"scala> number = 7\n<console>:11: error: reassignment to val\n       number = 7\n              ^","title":"代码清单2-3"},{"location":"/chapter-02/index.html#代码清单2-4","text":"scala> val number = 7\nnumber: Int = 7","title":"代码清单2-4"},{"location":"/chapter-02/index.html#代码清单2-5","text":"scala> val list = List(1, 2, 3)\nlist: List[Int] = List(1, 2, 3)","title":"代码清单2-5"},{"location":"/chapter-02/index.html#代码清单2-6","text":"scala> def isPalindrome(str: String) =\n     |   str == str.reverse\nisPalindrome: (str: String)Boolean\n\nscala> isPalindrome(\"mom\")\nres0: Boolean = true\n\nscala> isPalindrome(\"dude\")\nres1: Boolean = false\n\nscala> :quit","title":"代码清单2-6"},{"location":"/chapter-02/index.html#代码清单2-7","text":"println(\"Hello World, Welcome to Scala\")\n运行结果\n>scala HelloWorld.scala\nHello World, Welcome to Scala","title":"代码清单2-7"},{"location":"/chapter-02/index.html#代码清单2-8","text":"println(\"Hello World, Welcome to Scala\")\n运行结果\n> scalac Sample.scala\n> scala Sample\nHello Scala\n> java -classpath /opt/scala/current/lib/scala-library.jar:. Sample\nHello Scala","title":"代码清单2-8"},{"location":"/chapter-03/index.html","text":"","title":"第3章——从Java到Scala ·"},{"location":"/chapter-03/index.html#第3章-从java到scala","text":"","title":"第3章——从Java到Scala"},{"location":"/chapter-03/index.html#代码清单3-1","text":"//Java code\npublic class Greetings {\n  public static void main(String[] args) {\n    for(int i = 1; i < 4; i++) {\n      System.out.print(i + \",\");     \n    } \n    System.out.println(\"Scala Rocks!!!\");\n  }\n}\n运行结果\n1,2,3,Scala Rocks!!!","title":"代码清单3-1"},{"location":"/chapter-03/index.html#代码清单3-2","text":"for (i ← 1 to 3) {\n  print(s\"$i,\")\n}\n\nprintln(\"Scala Rocks!!!\")\n运行结果\n1,2,3,Scala Rocks!!!","title":"代码清单3-2"},{"location":"/chapter-03/index.html#代码清单3-3","text":"for (i ← 1 until 3) {\n  print(s\"$i,\")\n}\n\nprintln(\"Scala Rocks!!!\")\n运行结果\n1,2,Scala Rocks!!!","title":"代码清单3-3"},{"location":"/chapter-03/index.html#代码清单3-4","text":"(1 to 3).foreach(i ⇒ print(s\"$i,\"))\n\nprintln(\"Scala Rocks!!!\")\n运行结果\n1,2,3,Scala Rocks!!!","title":"代码清单3-4"},{"location":"/chapter-03/index.html#代码清单3-5","text":"class ScalaInt {\n  def playWithInt(): Unit = {\n    val capacity: Int = 10\n    val list = new java.util.ArrayList[String]\n    list.ensureCapacity(capacity)\n  }\n}","title":"代码清单3-5"},{"location":"/chapter-03/index.html#代码清单3-6","text":"def getPersonInfo(primaryKey: Int) = {\n  // Assume primaryKey is used to fetch a person's info...\n  // Here response is hard-coded\n  (\"Venkat\", \"Subramaniam\", \"venkats@agiledeveloper.com\")\n}\n\nval (firstName, lastName, emailAddress) = getPersonInfo(1)\n\nprintln(s\"First Name: $firstName\")\nprintln(s\"Last Name: $lastName\")\nprintln(s\"Email Address: $emailAddress\")\n运行结果\nFirst Name: Venkat\nLast Name: Subramaniam\nEmail Address: venkats@agiledeveloper.com","title":"代码清单3-6"},{"location":"/chapter-03/index.html#代码清单3-7","text":"def getPersonInfo(primaryKey: Int): (String, String, String) = {\n  (\"Venkat\", \"Subramaniam\", \"venkats@agiledeveloper.com\")\n}\n\nval (firstName, lastName) = getPersonInfo(1)\n运行结果\nMultipleAssignment2.scala:5: error: constructor cannot be instantiated to\nexpected type;\n found   : (T1, T2)\n required: (String, String, String)\nval (firstName, lastName) = getPersonInfo(1)\n    ^\none error found","title":"代码清单3-7"},{"location":"/chapter-03/index.html#代码清单3-8","text":"def max(values: Int*) = values.foldLeft(values(0)) { Math.max }","title":"代码清单3-8"},{"location":"/chapter-03/index.html#代码清单3-9","text":"max(8, 2, 3)","title":"代码清单3-9"},{"location":"/chapter-03/index.html#代码清单3-10","text":"max(2, 5, 3, 7, 1, 6)","title":"代码清单3-10"},{"location":"/chapter-03/index.html#代码清单3-11","text":"def function(input: Int*): Unit = println(input.getClass)\n\nfunction(1, 2, 3)\n运行结果\nclass scala.collection.mutable.WrappedArray$ofInt","title":"代码清单3-11"},{"location":"/chapter-03/index.html#代码清单3-12","text":"val numbers = Array(2, 5, 3, 7, 1, 6)\nmax(numbers) // type mismatch error\n运行结果\nCantSendArray.scala:5: error: type mismatch;\n found   : Array[Int]\n required: Int\nmax(numbers) // type mismatch error\n    ^\none error found","title":"代码清单3-12"},{"location":"/chapter-03/index.html#代码清单3-13","text":"val numbers = Array(2, 5, 3, 7, 1, 6)\nmax(numbers: _*)","title":"代码清单3-13"},{"location":"/chapter-03/index.html#代码清单3-14","text":"def mail(destination: String = \"head office\", mailClass: String = \"first\"): Unit =\n  println(s\"sending to $destination by $mailClass class\")","title":"代码清单3-14"},{"location":"/chapter-03/index.html#代码清单3-15","text":"mail(\"Houston office\", \"Priority\")\nmail(\"Boston office\")\nmail()\n运行结果\nsending to Houston office by Priority class\nsending to Boston office by first class\nsending to head office by first class","title":"代码清单3-15"},{"location":"/chapter-03/index.html#代码清单3-16","text":"mail(mailClass = \"Priority\", destination = \"Bahamas office\")","title":"代码清单3-16"},{"location":"/chapter-03/index.html#代码清单3-17","text":"mail(mailClass = \"Priority\")","title":"代码清单3-17"},{"location":"/chapter-03/index.html#代码清单3-18","text":"class Wifi(name: String) {\n  override def toString: String = name\n}\n\ndef connectToNetwork(user: String)(implicit wifi: Wifi): Unit = {\n  println(s\"User: $user connected to WIFI $wifi\")\n}\n\ndef atOffice(): Unit = {\n  println(\"--- at the office ---\")\n  implicit def officeNetwork: Wifi = new Wifi(\"office-network\")\n  val cafeteriaNetwork = new Wifi(\"cafe-connect\")\n\n  connectToNetwork(\"guest\")(cafeteriaNetwork)\n  connectToNetwork(\"Jill Coder\")\n  connectToNetwork(\"Joe Hacker\")\n}\n\ndef atJoesHome(): Unit = {\n  println(\"--- at Joe's home ---\")\n  implicit def homeNetwork: Wifi = new Wifi(\"home-network\")\n\n  connectToNetwork(\"guest\")(homeNetwork)\n  connectToNetwork(\"Joe Hacker\")\n}\n\natOffice()\natJoesHome()\n运行结果\n--- at the office ---\nUser: guest connected to WIFI cafe-connect\nUser: Jill Coder connected to WIFI office-network\nUser: Joe Hacker connected to WIFI office-network\n--- at Joe's home ---\nUser: guest connected to WIFI home-network\nUser: Joe Hacker connected to WIFI home-network","title":"代码清单3-18"},{"location":"/chapter-03/index.html#代码清单3-19","text":"val str = \"\"\"In his famous inaugural speech, John F. Kennedy said\n        \"And so, my fellow Americans: ask not what your country can do\n\tfor you-ask what you can do for your country.\" He then proceeded\n\tto speak to the citizens of the World...\"\"\"\n  println(str)\n运行结果\nIn his famous inaugural speech, John F. Kennedy said\n        \"And so, my fellow Americans: ask not what your country can do \n\tfor you-ask what you can do for your country.\" He then proceeded \n\tto speak to the citizens of the World...","title":"代码清单3-19"},{"location":"/chapter-03/index.html#代码清单3-20","text":"val str = \"\"\"In his famous inaugural speech, John F. Kennedy said\n            \t|\"And so, my fellow Americans: ask not what your country can do\n            \t|for you-ask what you can do for your country.\" He then proceeded\n            \t|to speak to the citizens of the World...\"\"\".stripMargin\nprintln(str)\n运行结果\nIn his famous inaugural speech, John F. Kennedy said\n\"And so, my fellow Americans: ask not what your country can do \nfor you-ask what you can do for your country.\" He then proceeded \nto speak to the citizens of the World...","title":"代码清单3-20"},{"location":"/chapter-03/index.html#代码清单3-21","text":"val message = s\"A discount of $discount% has been applied\"","title":"代码清单3-21"},{"location":"/chapter-03/index.html#代码清单3-22","text":"var price = 90\nval totalPrice = s\"The amount of discount is ${price * discount / 100} dollars\"","title":"代码清单3-22"},{"location":"/chapter-03/index.html#代码清单3-23","text":"val totalPrice = s\"The amount of discount is $$${price * discount / 100}\"","title":"代码清单3-23"},{"location":"/chapter-03/index.html#代码清单3-24","text":"val discount = 10\nvar price = 100\nval totalPrice =\n  s\"The amount after discount is $$${price * (1 - discount / 100.0)}\"\nprintln(totalPrice)\n\nprice = 50\nprintln(totalPrice)\n运行结果\nThe amount after discount is $90.0\nThe amount after discount is $90.0","title":"代码清单3-24"},{"location":"/chapter-03/index.html#代码清单3-25","text":"val product = \"ticket\"\nval price = 25.12\nval discount = 10\nprintln(s\"On $product $discount% saves $$${price * discount / 100.00}\")\n运行结果\nOn ticket 10% saves $2.512","title":"代码清单3-25"},{"location":"/chapter-03/index.html#代码清单3-26","text":"class Complex(val real: Int, val imaginary: Int) {\n  def +(operand: Complex): Complex = {\n    new Complex(real + operand.real, imaginary + operand.imaginary)\n  }\n\n  override def toString: String = {\n    val sign = if (imaginary < 0) \"\" else \"+\"\n    s\"$real$sign${imaginary}i\"\n  }\n}\n\nval c1 = new Complex(1, 2)\nval c2 = new Complex(2, -3)\nval sum = c1 + c2\nprintln(s\"($c1) + ($c2) = $sum\")\n运行结果\n(1+2i) + (2-3i) = 3-1i","title":"代码清单3-26"},{"location":"/chapter-03/index.html#代码清单3-27","text":"class Complex(val real: Int, val imaginary: Int) {\n  def +(operand: Complex): Complex = {\n    println(\"Calling +\")\n    new Complex(real + operand.real, imaginary + operand.imaginary)\n  }\n\n  def *(operand: Complex): Complex = {\n    println(\"Calling *\")\n    new Complex(\n      real * operand.real - imaginary * operand.imaginary,\n      real * operand.imaginary + imaginary * operand.real)\n  }\n  override def toString: String = {\n    val sign = if (imaginary < 0) \"\" else \"+\"\n    s\"$real$sign${imaginary}i\"\n  }\n}\n\nval c1 = new Complex(1, 4)\nval c2 = new Complex(2, -3)\nval c3 = new Complex(2, 2)\nprintln(c1 + c2 * c3)\n运行结果\nCalling *\nCalling +\n11+2i","title":"代码清单3-27"},{"location":"/chapter-03/index.html#代码清单3-28","text":"var a = 1\nvar b = 2\na = b = 3 //Error\n运行结果\nSerialAssignments.scala:4: error: type mismatch;\n found   : Unit\n required: Int\na = b = 3\n      ^\none error found","title":"代码清单3-28"},{"location":"/chapter-03/index.html#代码清单3-29","text":"val str1 = \"hello\"\nval str2 = \"hello\"\nval str3 = new String(\"hello\")\n\nprintln(str1 == str2) // Equivalent to Java's str1.equals(str2)\nprintln(str1 eq str2) // Equivalent to Java's str1 == str2\nprintln(str1 == str3)\nprintln(str1 eq str3)\n运行结果\ntrue\ntrue\ntrue\nfalse","title":"代码清单3-29"},{"location":"/chapter-03/index.html#代码清单3-30","text":"val list1 = new java.util.ArrayList[Int];\n{\n  println(\"Created list1\")\n}\n\nval list2 = new java.util.ArrayList[Int] {\n  println(\"Created list2\")\n}\n\nprintln(list1.getClass)\nprintln(list2.getClass)\n运行结果\nCreated list1\nCreated list2\nclass java.util.ArrayList\nclass Main$$anon$2$$anon$1","title":"代码清单3-30"},{"location":"/chapter-03/index.html#代码清单3-31","text":"def check1 = true\ndef check2: Boolean = return true\ndef check3: Boolean = true\nprintln(check1)\nprintln(check2)\nprintln(check3)\n运行结果\ntrue\ntrue\ntrue","title":"代码清单3-31"},{"location":"/chapter-03/index.html#代码清单3-32","text":"class Microwave {\n  def start(): Unit = println(\"started\")\n  def stop(): Unit = println(\"stopped\")\n  private def turnTable(): Unit = println(\"turning table\")\n}\nval microwave = new Microwave\nmicrowave.start() // OK\n运行结果\nAccess.scala:9: error: method turnTable in class Microwave cannot be\naccessed in this.Microwave\nmicrowave.turnTable() //ERROR\n          ^\none error found","title":"代码清单3-32"},{"location":"/chapter-03/index.html#代码清单3-33","text":"class Vehicle {\n  protected def checkEngine() {}\n}\n\nclass Car extends Vehicle {\n  def start() { checkEngine() /*OK*/ }\n  def tow(car: Car) {\n    car.checkEngine() //OK\n  }\n  def tow(vehicle: Vehicle) {\n    vehicle.checkEngine() //ERROR\n  }\n}\n\nclass GasStation {\n  def fillGas(vehicle: Vehicle) {\n    vehicle.checkEngine() //ERROR\n  }\n}\n运行结果\nProtected.scala:12: error: method checkEngine in class Vehicle cannot be\naccessed in automobiles.Vehicle\n Access to protected method checkEngine not permitted because\n prefix type automobiles.Vehicle does not conform to\n class Car in package automobiles where the access take place\n    vehicle.checkEngine() //ERROR\n            ^\nProtected.scala:17: error: method checkEngine in class Vehicle cannot be \naccessed in automobiles.Vehicle\n Access to protected method checkEngine not permitted because\n enclosing class GasStation in package automobiles is not a subclass of\n class Vehicle in package automobiles where target is defined\n    vehicle.checkEngine() //ERROR\n            ^\ntwo errors found","title":"代码清单3-33"},{"location":"/chapter-03/index.html#代码清单3-34","text":"package society {\n\n  package professional {\n    class Executive {\n      private[professional] var workDetails = null\n      private[society] var friends = null\n      private[this] var secrets = null\n\n      def help(another: Executive): Unit = {\n        println(another.workDetails)\n        println(secrets)\n        println(another.secrets) //ERROR\n      }\n    }\n\n    class Assistant {\n      def assist(anExec: Executive): Unit = {\n        println(anExec.workDetails)\n        println(anExec.friends)\n      }\n    }\n  }\n\n  package social {\n    class Acquaintance {\n      def socialize(person: professional.Executive) {\n        println(person.friends)\n        println(person.workDetails) // ERROR\n      }\n    }\n  }\n}\n运行结果\n@@snip代码清单3-34运行结果{ #output }`","title":"代码清单3-34"},{"location":"/chapter-04/index.html","text":"","title":"第4章——善用对象 ·"},{"location":"/chapter-04/index.html#第4章-善用对象","text":"","title":"第4章——善用对象"},{"location":"/chapter-04/index.html#代码清单4-1","text":"//Java example\npublic class Car {\n  private final int year;\n  private int miles;    \n  \n  public Car(int yearOfMake) { year = yearOfMake; }\n  \n  public int getYear() { return year; }\n  public int getMiles() { return miles; }\n  \n  public void drive(int distance) {                   \n    miles += Math.abs(distance);\n  }\n}","title":"代码清单4-1"},{"location":"/chapter-04/index.html#代码清单4-2","text":"class Car(val year: Int) {\n  private var milesDriven: Int = 0\n\n  def miles: Int = milesDriven\n\n  def drive(distance: Int): Unit = {\n    milesDriven += Math.abs(distance)\n  }\n}\n运行结果\nCar made in year 2015\nMiles driven 0\nDrive for 10 miles\nMiles driven 10","title":"代码清单4-2"},{"location":"/chapter-04/index.html#代码清单4-3","text":"class CreditCard(val number: Int, var creditLimit: Int)\n运行结果\nCompiled from \"CreditCard.scala\"\npublic class CreditCard {\n  private final int number;\n  private int creditLimit;\n  public int number();\n  public int creditLimit();\n  public void creditLimit_$eq(int);\n  public CreditCard(int, int);\n}","title":"代码清单4-3"},{"location":"/chapter-04/index.html#代码清单4-4","text":"class Construct(param: String) {\n  println(s\"Creating an instance of Construct with parameter $param\")\n}\n\nprintln(\"Let's create an instance\")\nnew Construct(\"sample\")\n运行结果\nLet's create an instance\nCreating an instance of Construct with parameter sample","title":"代码清单4-4"},{"location":"/chapter-04/index.html#代码清单4-5","text":"class Person(val firstName: String, val lastName: String) {\n  var position: String = _\n\n  println(s\"Creating $toString\")\n\n  def this(firstName: String, lastName: String, positionHeld: String) {\n    this(firstName, lastName)\n    position = positionHeld\n  }\n  override def toString: String = {\n    s\"$firstName $lastName holds $position position\"\n  }\n}\n\nval john = new Person(\"John\", \"Smith\", \"Analyst\")\nprintln(john)\nval bill = new Person(\"Bill\", \"Walker\")\nprintln(bill)\n运行结果\nCreating John Smith holds null position\nJohn Smith holds Analyst position\nCreating Bill Walker holds null position\nBill Walker holds null position\n反编译结果\nprivate java.lang.String position;\npublic java.lang.String position();\npublic void position_$eq(java.lang.String);","title":"代码清单4-5"},{"location":"/chapter-04/index.html#代码清单4-6","text":"import scala.beans.BeanProperty\n\nclass Dude(@BeanProperty val firstName: String, val lastName: String) {\n  @BeanProperty var position: String = _\n}\n反编译结果\nCompiled from \"Dude.scala\"\npublic class Dude {\n  private final java.lang.String firstName;\n  private final java.lang.String lastName;\n  private java.lang.String position;\n  public java.lang.String firstName();\n  public java.lang.String lastName();\n  public java.lang.String position();\n  public void position_$eq(java.lang.String);\n  public void setPosition(java.lang.String);\n  public java.lang.String getFirstName();\n  public java.lang.String getPosition();\n  public Dude(java.lang.String, java.lang.String);\n}","title":"代码清单4-6"},{"location":"/chapter-04/index.html#代码清单4-7","text":"class PoliceOfficer(val name: String)","title":"代码清单4-7"},{"location":"/chapter-04/index.html#代码清单4-8","text":"object CopApp extends App {\n  type Cop = PoliceOfficer\n\n  val topCop = new Cop(\"Jack\")\n  println(topCop.getClass)\n}\n运行结果\nclass PoliceOfficer","title":"代码清单4-8"},{"location":"/chapter-04/index.html#代码清单4-9","text":"class Vehicle(val id: Int, val year: Int) {\n  override def toString = s\"ID: $id Year: $year\"\n}\n\nclass Car(override val id: Int, override val year: Int, var fuelLevel: Int)\n  extends Vehicle(id, year) {\n  override def toString = s\"${super.toString} Fuel Level: $fuelLevel\"\n}\n\nval car = new Car(1, 2015, 100)\nprintln(car)\n运行结果\nID: 1 Year: 2015 Fuel Level: 100","title":"代码清单4-9"},{"location":"/chapter-04/index.html#代码清单4-10","text":"def echo[T](input1: T, input2: T): Unit =\n  println(s\"got $input1 (${input1.getClass}) $input2 (${input2.getClass})\")","title":"代码清单4-10"},{"location":"/chapter-04/index.html#代码清单4-11","text":"echo(\"hello\", \"there\")\necho(4, 5)\n运行结果\ngot hello (class java.lang.String) there (class java.lang.String)\ngot 4 (class java.lang.Integer) 5 (class java.lang.Integer)","title":"代码清单4-11"},{"location":"/chapter-04/index.html#代码清单4-12","text":"echo(\"hi\", 5)\n运行结果\ngot hi (class java.lang.String) 5 (class java.lang.Integer)","title":"代码清单4-12"},{"location":"/chapter-04/index.html#代码清单4-13","text":"echo[Int](\"hi\", 5) //error: type mismatch","title":"代码清单4-13"},{"location":"/chapter-04/index.html#代码清单4-14","text":"def echo2[T1, T2](input1: T1, input2: T2): Unit =\n  println(s\"received $input1 and $input2\")\n\necho2(\"Hi\", \"5\")","title":"代码清单4-14"},{"location":"/chapter-04/index.html#代码清单4-15","text":"class Message[T](val content: T) {\n  override def toString = s\"message content is $content\"\n\n  def is(value: T): Boolean = value == content\n}","title":"代码清单4-15"},{"location":"/chapter-04/index.html#代码清单4-16","text":"val message1: Message[String] = new Message(\"howdy\")\nval message2 = new Message(42)\n\nprintln(message1)\nprintln(message1.is(\"howdy\"))\nprintln(message1.is(\"hi\"))\nprintln(message2.is(22))\n运行结果\nmessage content is howdy\ntrue\nfalse\nfalse","title":"代码清单4-16"},{"location":"/chapter-04/index.html#代码清单4-17","text":"message1.is(22) //error: type mismatch","title":"代码清单4-17"},{"location":"/chapter-04/index.html#代码清单4-18","text":"message2.is('A') //No error!","title":"代码清单4-18"},{"location":"/chapter-04/index.html#代码清单4-19","text":"import scala.collection._\n\nclass Marker(val color: String) {\n  println(s\"Creating ${this}\")\n\n  override def toString = s\"marker color $color\"\n}\n\nobject MarkerFactory {\n  private val markers = mutable.Map(\n    \"red\" -> new Marker(\"red\"),\n    \"blue\" -> new Marker(\"blue\"),\n    \"yellow\" -> new Marker(\"yellow\"))\n\n  def getMarker(color: String): Marker =\n    markers.getOrElseUpdate(color, new Marker(color))\n}\n\nprintln(MarkerFactory getMarker \"blue\")\nprintln(MarkerFactory getMarker \"blue\")\nprintln(MarkerFactory getMarker \"red\")\nprintln(MarkerFactory getMarker \"red\")\nprintln(MarkerFactory getMarker \"green\")\n运行结果\nCreating marker color red\nCreating marker color blue\nCreating marker color yellow\nmarker color blue\nmarker color blue\nmarker color red\nmarker color red\nCreating marker color green\nmarker color green","title":"代码清单4-19"},{"location":"/chapter-04/index.html#代码清单4-20","text":"import scala.collection._\n\nclass Marker private (val color: String) {\n  println(s\"Creating ${this}\")\n\n  override def toString = s\"marker color $color\"\n}\n\nobject Marker {\n  private val markers = mutable.Map(\n    \"red\" -> new Marker(\"red\"),\n    \"blue\" -> new Marker(\"blue\"),\n    \"yellow\" -> new Marker(\"yellow\"))\n\n  def getMarker(color: String): Marker =\n    markers.getOrElseUpdate(color, new Marker(color))\n}\n\nprintln(Marker getMarker \"blue\")\nprintln(Marker getMarker \"blue\")\nprintln(Marker getMarker \"red\")\nprintln(Marker getMarker \"red\")\nprintln(Marker getMarker \"green\")\n运行结果\nCreating marker color red\nCreating marker color blue\nCreating marker color yellow\nmarker color blue\nmarker color blue\nmarker color red\nmarker color red\nCreating marker color green\nmarker color green","title":"代码清单4-20"},{"location":"/chapter-04/index.html#代码清单4-21","text":"import scala.collection._\n\nclass Marker private (val color: String) {\n  override def toString = s\"marker color $color\"\n}\nobject Marker {\n  private val markers = mutable.Map(\n    \"red\" -> new Marker(\"red\"),\n    \"blue\" -> new Marker(\"blue\"),\n    \"yellow\" -> new Marker(\"yellow\"))\n\n  def supportedColors: Iterable[String] = markers.keys\n  def apply(color: String): Marker = markers.getOrElseUpdate(color, new Marker(color))\n}\nprintln(s\"Supported colors are : ${Marker.supportedColors}\")\nprintln(Marker(\"blue\"))\nprintln(Marker(\"red\"))\n运行结果\nCreating marker color red\nCreating marker color blue\nCreating marker color yellow\nmarker color blue\nmarker color blue\nmarker color red\nmarker color red\nCreating marker color green\nmarker color green","title":"代码清单4-21"},{"location":"/chapter-04/index.html#代码清单4-22","text":"object Greeter {\n  def greet(): Unit = println(\"Ahoy, me hearties!\")\n}\n运行结果\nCompiled from \"Greeter.scala\"\npublic final class Greeter {\n  public static void greet();\n}","title":"代码清单4-22"},{"location":"/chapter-04/index.html#代码清单4-23","text":"package chapter4.finance1.finance.currencies\n\nobject Currency extends Enumeration {\n  type Currency = Value\n  val CNY, GBP, INR, JPY, NOK, PLN, SEK, USD = Value\n}","title":"代码清单4-23"},{"location":"/chapter-04/index.html#代码清单4-24","text":"package chapter4.finance1.finance.currencies\n\nimport Currency._\n\nclass Money(val amount: Int, val currency: Currency) {\n  override def toString = s\"$amount $currency\"\n}","title":"代码清单4-24"},{"location":"/chapter-04/index.html#代码清单4-25","text":"import chapter4.finance1.finance.currencies.Currency\n\nobject UseCurrency extends App {\n  Currency.values.foreach { currency ⇒ println(currency) }\n}\n运行结果\nCNY\nGBP\nINR\nJPY\nNOK\nPLN\nSEK\nUSD","title":"代码清单4-25"},{"location":"/chapter-04/index.html#代码清单4-26","text":"package chapter4.finance1.finance.currencies\n\nimport Currency._\n\nobject Converter {\n  def convert(money: Money, to: Currency): Money = {\n    //fetch current market rate... using mocked value here\n    val conversionRate = 2\n    new Money(money.amount * conversionRate, to)\n  }\n}","title":"代码清单4-26"},{"location":"/chapter-04/index.html#代码清单4-27","text":"package chapter4.finance1.finance.currencies\n\nobject Charge {\n  def chargeInUSD(money: Money): String = {\n    def moneyInUSD = Converter.convert(money, Currency.USD)\n    s\"charged $$${moneyInUSD.amount}\"\n  }\n}","title":"代码清单4-27"},{"location":"/chapter-04/index.html#代码清单4-28","text":"import chapter4.finance1.finance.currencies._\n\nobject CurrencyApp extends App {\n  var moneyInGBP = new Money(10, Currency.GBP)\n\n  println(Charge.chargeInUSD(moneyInGBP))\n\n  println(Converter.convert(moneyInGBP, Currency.USD))\n}","title":"代码清单4-28"},{"location":"/chapter-04/index.html#代码清单4-29","text":"package chapter4.finance2.finance\n\npackage object currencies {\n  import Currency._\n\n  def convert(money: Money, to: Currency): Money = {\n    //fetch current market rate... using mocked value here\n    val conversionRate = 2\n    new Money(money.amount * conversionRate, to)\n  }\n}","title":"代码清单4-29"},{"location":"/chapter-04/index.html#代码清单4-30","text":"package chapter4.finance2.finance.currencies\n\nobject Charge {\n  def chargeInUSD(money: Money): String = {\n    def moneyInUSD = convert(money, Currency.USD)\n    s\"charged $$${moneyInUSD.amount}\"\n  }\n}","title":"代码清单4-30"},{"location":"/chapter-04/index.html#代码清单4-31","text":"package chapter4.finance2\n\nimport chapter4.finance2.finance.currencies._\n\nobject CurrencyApp extends App {\n  var moneyInGBP = new Money(10, Currency.GBP)\n\n  println(Charge.chargeInUSD(moneyInGBP))\n\n  println(convert(moneyInGBP, Currency.USD))\n}\n运行结果\nCNY\nGBP\nINR\nJPY\nNOK\nPLN\nSEK\nUSD","title":"代码清单4-31"},{"location":"/chapter-05/index.html","text":"","title":"第5章——善用类型 ·"},{"location":"/chapter-05/index.html#第5章-善用类型","text":"","title":"第5章——善用类型"},{"location":"/chapter-05/index.html#代码清单5-1","text":"val greet: String = \"Ahoy!\"","title":"代码清单5-1"},{"location":"/chapter-05/index.html#代码清单5-2","text":"val greet = \"Ahoy!\"","title":"代码清单5-2"},{"location":"/chapter-05/index.html#代码清单5-3","text":"println(greet)\nprintln(greet.getClass)","title":"代码清单5-3"},{"location":"/chapter-05/index.html#代码清单5-4","text":"class TypeInference {\n  val greet = \"Ahoy!\"\n}\n反编译结果\nCompiled from \"TypeInference.scala\"\npublic class TypeInference {\n  private final java.lang.String greet;\n  public java.lang.String greet();\n  public TypeInference();\n}\nREPL运行结果\nscala> val greet = \"Ahoy!\"\ngreet: String = Ahoy!\n\nscala> :quit","title":"代码清单5-4"},{"location":"/chapter-05/index.html#代码清单5-5","text":"import java._\n\nvar list1: util.List[Int] = new util.ArrayList[Int]\nvar list2 = new util.ArrayList[Int]","title":"代码清单5-5"},{"location":"/chapter-05/index.html#代码清单5-6","text":"import java._\n\nvar list1 = new util.ArrayList[Int]\nvar list2 = new util.ArrayList\nlist2 = list1 // Compilation Error\n运行结果\nGenerics2.scala:5: error: type mismatch;\n found   : java.util.ArrayList[Int]\n required: java.util.ArrayList[Nothing]\nNote: Int >: Nothing, but Java-defined class ArrayList is invariant in \ntype E.\nYou may wish to investigate a wildcard type such as `_ >: Nothing`. (SLS \n3.2.10)\nlist2 = list1 // Compilation Error\n        ^\none error found","title":"代码清单5-6"},{"location":"/chapter-05/index.html#代码清单5-7","text":"import java._\n\nvar list1 = new util.ArrayList[Int]\nvar list2 = new util.ArrayList[Any]\n\nvar ref1: Int = 1\nvar ref2: Any = _\n\nref2 = ref1 //OK\n\nlist2 = list1 // Compilation Error\n运行结果\nGenerics2.scala:5: error: type mismatch;\n found   : java.util.ArrayList[Int]\n required: java.util.ArrayList[Nothing]\nNote: Int >: Nothing, but Java-defined class ArrayList is invariant in \ntype E.\nYou may wish to investigate a wildcard type such as `_ >: Nothing`. (SLS \n3.2.10)\nlist2 = list1 // Compilation Error\n        ^\none error found","title":"代码清单5-7"},{"location":"/chapter-05/index.html#代码清单5-8","text":"def someOp(number: Int) =\n  if (number < 10)\n    number * 2\n  else\n    throw new RuntimeException(\"invalid argument\")","title":"代码清单5-8"},{"location":"/chapter-05/index.html#代码清单5-9","text":"scala> def madMethod() = { throw new IllegalArgumentException() }\nmadMethod: ()Nothing\n\nscala> :quit","title":"代码清单5-9"},{"location":"/chapter-05/index.html#代码清单5-10","text":"def commentOnPractice(input: String) = {\n  //rather than returning null\n  if (input == \"test\") Some(\"good\") else None\n}\n\nfor (input ← Set(\"test\", \"hack\")) {\n  val comment = commentOnPractice(input)\n  val commentDisplay = comment.getOrElse(\"Found no comments\")\n  println(s\"input: $input comment: $commentDisplay\")\n}\n运行结果\ninput: test comment: good\ninput: hack comment: Found no comments","title":"代码清单5-10"},{"location":"/chapter-05/index.html#代码清单5-11","text":"def compute(input: Int) =\n  if (input > 0)\n    Right(math.sqrt(input))\n  else\n    Left(\"Error computing, invalid input\")","title":"代码清单5-11"},{"location":"/chapter-05/index.html#代码清单5-12","text":"def displayResult(result: Either[String, Double]): Unit = {\n  println(s\"Raw: $result\")\n  result match {\n    case Right(value) ⇒ println(s\"result $value\")\n    case Left(err)    ⇒ println(s\"Error: $err\")\n  }\n}","title":"代码清单5-12"},{"location":"/chapter-05/index.html#代码清单5-13","text":"displayResult(compute(4))\ndisplayResult(compute(-4))\n运行结果\nRaw: Right(2.0)\nresult 2.0\nRaw: Left(Error computing, invalid input)\nError: Error computing, invalid input","title":"代码清单5-13"},{"location":"/chapter-05/index.html#代码清单5-14","text":"def function1(): Unit = { Math.sqrt(4) }\ndef function2 = { Math.sqrt(4) }\ndef function3 = Math.sqrt(4)\ndef function4: Double = { Math.sqrt(4) }\n运行结果\nscala> def function1 { Math.sqrt(4) }\nfunction1: Unit\n\nscala> def function2 = { Math.sqrt(4) }\nfunction2: Double\n\nscala> def function3 = Math.sqrt(4)\nfunction3: Double\n\nscala> def function4 : Double = { Math.sqrt(4) }\nfunction4: Double\n\nscala> :quit","title":"代码清单5-14"},{"location":"/chapter-05/index.html#代码清单5-15","text":"var arr1 = new Array[Int](3)\nvar arr2: Array[Any] = _\n\narr2 = arr1 // Compilation ERROR\n运行结果\nNotAllowed.scala:4: error: type mismatch;\n found   : Array[Int]\n required: Array[Any]\nNote: Int <: Any, but class Array is invariant in type T.\nYou may wish to investigate a wildcard type such as `_ <: Any`. (SLS \n3.2.10)\narr2 = arr1 // Compilation ERROR\n       ^\none error found","title":"代码清单5-15"},{"location":"/chapter-05/index.html#代码清单5-16","text":"//Java code \nclass Fruit {} \nclass Banana extends Fruit {}\nclass Apple extends Fruit {}\n\npublic class Trouble {\n  public static void main(String[] args) {\n    Banana[] basketOfBanana = new Banana[2];\n    basketOfBanana[0] = new Banana();\n    \n    Fruit[] basketOfFruits = basketOfBanana; \n    basketOfFruits[1] = new Apple(); \n    \n    for(Banana banana : basketOfBanana) {\n      System.out.println(banana);\n    }    \n  }\n}\n运行结果\nException in thread \"main\" java.lang.ArrayStoreException: Apple\n\tat Trouble.main(Trouble.java:12)","title":"代码清单5-16"},{"location":"/chapter-05/index.html#代码清单5-17","text":"//Java code\nArrayList<Integer> list = new ArrayList<Integer>();\nArrayList<Object> list2 = list; // Compilation error\n运行结果\nOKJava.java:8: error: incompatible types: ArrayList<Integer> cannot be\nconverted to ArrayList<Object>\n    ArrayList<Object> list2 = list; // Compilation error\n                              ^\n1 error","title":"代码清单5-17"},{"location":"/chapter-05/index.html#代码清单5-18","text":"class Pet(val name: String) {\n  override def toString: String = name\n}\n\nclass Dog(override val name: String) extends Pet(name)\n\ndef workWithPets(pets: Array[Pet]): Unit = {}","title":"代码清单5-18"},{"location":"/chapter-05/index.html#代码清单5-19","text":"val dogs = Array(new Dog(\"Rover\"), new Dog(\"Comet\"))","title":"代码清单5-19"},{"location":"/chapter-05/index.html#代码清单5-20","text":"def playWithPets[T <: Pet](pets: Array[T]): Unit =\n  println(\"Playing with pets: \" + pets.mkString(\", \"))","title":"代码清单5-20"},{"location":"/chapter-05/index.html#代码清单5-21","text":"playWithPets(dogs)\n运行结果\nPlaying with pets: Rover, Comet","title":"代码清单5-21"},{"location":"/chapter-05/index.html#代码清单5-22","text":"def copyPets[S, D >: S](fromPets: Array[S], toPets: Array[D]): Unit = { //...\n}\n\nval pets = new Array[Pet](10)\ncopyPets(dogs, pets)","title":"代码清单5-22"},{"location":"/chapter-05/index.html#代码清单5-23","text":"class MyList[+T] //...\nvar list1 = new MyList[Int]\nvar list2: MyList[Any] = _\nlist2 = list1 // OK","title":"代码清单5-23"},{"location":"/chapter-05/index.html#代码清单5-24","text":"import scala.language.implicitConversions\nimport java.time.LocalDate\n\nclass DateHelper(offset: Int) {\n  def days(when: String): LocalDate = {\n    val today = LocalDate.now\n    when match {\n      case \"ago\"      ⇒ today.minusDays(offset)\n      case \"from_now\" ⇒ today.plusDays(offset)\n      case _          ⇒ today\n    }\n  }\n}","title":"代码清单5-24"},{"location":"/chapter-05/index.html#代码清单5-25","text":"implicit def convertInt2DateHelper(offset: Int): DateHelper = new DateHelper(offset)\n\nval ago = \"ago\"\nval from_now = \"from_now\"\n\nval past = 2 days ago\nval appointment = 5 days from_now\n\nprintln(past)\nprintln(appointment)\n运行结果\n2015-08-11\n2015-08-18","title":"代码清单5-25"},{"location":"/chapter-05/index.html#代码清单5-26","text":"import scala.language.implicitConversions\nimport java.time.LocalDate\n\nclass DateHelper(offset: Int) {\n  def days(when: String): LocalDate = {\n    val today = LocalDate.now\n    when match {\n      case \"ago\"      ⇒ today.minusDays(offset)\n      case \"from_now\" ⇒ today.plusDays(offset)\n      case _          ⇒ today\n    }\n  }\n}\n\nobject DateHelper {\n  val ago = \"ago\"\n  val from_now = \"from_now\"\n  implicit def convertInt2DateHelper(offset: Int): DateHelper = new DateHelper(offset)\n}","title":"代码清单5-26"},{"location":"/chapter-05/index.html#代码清单5-27","text":"import DateHelper._\n\nobject DaysDSL extends App {\n  val past = 2 days ago\n  val appointment = 5 days from_now\n\n  println(past)\n  println(appointment)\n}\n运行结果\n2015-08-11\n2015-08-18","title":"代码清单5-27"},{"location":"/chapter-05/index.html#代码清单5-28","text":"object DateUtil {\n  val ago = \"ago\"\n  val from_now = \"from_now\"\n\n  implicit class DateHelper(val offset: Int) {\n    import java.time.LocalDate\n    def days(when: String): LocalDate = {\n      val today = LocalDate.now\n      when match {\n        case \"ago\"      ⇒ today.minusDays(offset)\n        case \"from_now\" ⇒ today.plusDays(offset)\n        case _          ⇒ today\n      }\n    }\n  }\n}","title":"代码清单5-28"},{"location":"/chapter-05/index.html#代码清单5-29","text":"object UseDateUtil extends App {\n  import DateUtil._\n\n  val past = 2 days ago\n  val appointment = 5 days from_now\n\n  println(past)\n  println(appointment)\n}","title":"代码清单5-29"},{"location":"/chapter-05/index.html#代码清单5-30","text":"5: invokevirtual #73                 // Method\nDateUtil$.DateHelper:(I)LDateUtil$DateHelper;\n       8: getstatic     #69                 // Field \nDateUtil$.MODULE$:LDateUtil$;\n      11: invokevirtual #77                 // Method \nDateUtil$.ago:()Ljava/lang/String;\n      14: invokevirtual #83                 // Method \nDateUtil$DateHelper.days:(Ljava/lang/String;)Ljava/time/LocalDate;","title":"代码清单5-30"},{"location":"/chapter-05/index.html#代码清单5-31","text":"implicit class DateHelper(val offset: Int) extends AnyVal {\n反编译结果\n8: invokevirtual #78                 // Method\nDateUtil$.DateHelper:(I)I\n      11: getstatic     #74                 // Field \nDateUtil$.MODULE$:LDateUtil$;\n      14: invokevirtual #82                 // Method \nDateUtil$.ago:()Ljava/lang/String;\n      17: invokevirtual #86                 // Method \nDateUtil$DateHelper$.days$extension:(ILjava/lang/String;)Ljava/time/LocalDate;","title":"代码清单5-31"},{"location":"/chapter-05/index.html#代码清单5-32","text":"class Name(val value: String) {\n  override def toString: String = value\n  def length: Int = value.length\n}\n\nobject UseName extends App {\n  def printName(name: Name): Unit = {\n    println(name)\n  }\n\n  val name = new Name(\"Snowy\")\n  println(name.length)\n  printName(name)\n}\n反编译结果\n5: ldc           #76                 // String Snowy\n       7: invokespecial #79                 // Method \nName.\"<init>\":(Ljava/lang/String;)V\n      10: putfield      #71                 // Field name:LName;\n      13: getstatic     #64                 // Field \nscala/Predef$.MODULE$:Lscala/Predef$;\n      16: aload_0\n      17: invokevirtual #81                 // Method name:()LName;\n      20: invokevirtual #85                 // Method Name.length:()I\n      23: invokestatic  #91                 // Method \nscala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;\n      26: invokevirtual #68                 // Method \nscala/Predef$.println:(Ljava/lang/Object;)V\n      29: aload_0\n      30: aload_0\n      31: invokevirtual #81                 // Method name:()LName;\n      34: invokevirtual #93                 // Method printName:(LName;)V\n      37: return","title":"代码清单5-32"},{"location":"/chapter-05/index.html#代码清单5-33","text":"class Name(val value: String) extends AnyVal {\n反编译结果\n1: ldc           #78                 // String Snowy\n       3: putfield      #75                 // Field \nname:Ljava/lang/String;\n       6: getstatic     #64                 // Field \nscala/Predef$.MODULE$:Lscala/Predef$;\n       9: getstatic     #83                 // Field Name$.MODULE$:LName$;\n      12: aload_0\n      13: invokevirtual #85                 // Method \nname:()Ljava/lang/String;\n      16: invokevirtual #89                 // Method \nName$.length$extension:(Ljava/lang/String;)I\n      19: invokestatic  #95                 // Method \nscala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;\n      22: invokevirtual #72                 // Method \nscala/Predef$.println:(Ljava/lang/Object;)V\n      25: aload_0\n      26: aload_0\n      27: invokevirtual #85                 // Method \nname:()Ljava/lang/String;\n      30: invokevirtual #97                 // Method \nprintName:(Ljava/lang/String;)V\n      33: return","title":"代码清单5-33"},{"location":"/chapter-05/index.html#代码清单5-34","text":"val any: Any = name","title":"代码清单5-34"},{"location":"/chapter-05/index.html#代码清单5-35","text":"import MyInterpolator._\n\nval ssn = \"123-45-6789\"\nval account = \"0246781263\"\nval balance = 20145.23\n\nprintln(mask\"\"\"Account: $account\n  |Social Security Number: $ssn\n  |Balance: $$^$balance\n  |Thanks for your business.\"\"\".stripMargin)","title":"代码清单5-35"},{"location":"/chapter-05/index.html#代码清单5-36","text":"object MyInterpolator {\n  implicit class Interpolator(val context: StringContext) extends AnyVal {\n    def mask(args: Any*): StringBuilder = {\n      val processed = context.parts.zip(args).map { item ⇒\n        val (text, expression) = item\n        if (text.endsWith(\"^\"))\n          s\"${text.split('^')(0)}$expression\"\n        else\n          s\"$text...${expression.toString takeRight 4}\"\n      }.mkString\n\n      new StringBuilder(processed).append(context.parts.last)\n    }\n  }\n}\n运行结果\nAccount: ...1263\nSocial Security Number: ...6789\nBalance: $20145.23\nThanks for your business.","title":"代码清单5-36"},{"location":"/chapter-06/index.html","text":"","title":"第6章——函数值和闭包 ·"},{"location":"/chapter-06/index.html#第6章-函数值和闭包","text":"","title":"第6章——函数值和闭包"},{"location":"/chapter-06/index.html#代码清单6-1","text":"def sum(number: Int) = {\n  var result = 0\n  for (i ← 1 to number) {\n    result += i\n  }\n  result\n}","title":"代码清单6-1"},{"location":"/chapter-06/index.html#代码清单6-2","text":"def totalResultOverRange(number: Int, codeBlock: Int ⇒ Int) = {\n  var result = 0\n  for (i ← 1 to number) {\n    result += codeBlock(i)\n  }\n  result\n}","title":"代码清单6-2"},{"location":"/chapter-06/index.html#代码清单6-3","text":"println(totalResultOverRange(11, i ⇒ i))","title":"代码清单6-3"},{"location":"/chapter-06/index.html#代码清单6-4","text":"println(totalResultOverRange(11, i ⇒ if (i % 2 == 0) i else 0))","title":"代码清单6-4"},{"location":"/chapter-06/index.html#代码清单6-5","text":"println(totalResultOverRange(11, i ⇒ if (i % 2 != 0) i else 0))","title":"代码清单6-5"},{"location":"/chapter-06/index.html#代码清单6-6","text":"def printValue(generator: () ⇒ Int): Unit = {\n  println(s\"Generated value is ${generator()}\")\n}\n\nprintValue(() ⇒ 42)","title":"代码清单6-6"},{"location":"/chapter-06/index.html#代码清单6-7","text":"def inject(arr: Array[Int], initial: Int, operation: (Int, Int) ⇒ Int) = {\n  var carryOver = initial\n  arr.foreach(element ⇒ carryOver = operation(carryOver, element))\n  carryOver\n}","title":"代码清单6-7"},{"location":"/chapter-06/index.html#代码清单6-8","text":"val array = Array(2, 3, 5, 1, 6, 4)\nval sum = inject(array, 0, (carry, elem) ⇒ carry + elem)\nprintln(s\"Sum of elements in array is $sum\")","title":"代码清单6-8"},{"location":"/chapter-06/index.html#代码清单6-9","text":"val max =\n  inject(array, Integer.MIN_VALUE, (carry, elem) ⇒ Math.max(carry, elem))\nprintln(s\"Max of elements in array is  $max\")\n运行结果\nSum of elements in array is 21\nMax of elements in array is  6","title":"代码清单6-9"},{"location":"/chapter-06/index.html#代码清单6-10","text":"val sum = array.foldLeft(0) { (sum, elem) ⇒ sum + elem } //Could be replaced with sum\nval max = array.foldLeft(Integer.MIN_VALUE) { (large, elem) ⇒\n  Math.max(large, elem)\n}\n\nprintln(s\"Sum of elements in array is $sum\")\nprintln(s\"Max of elements in array is $max\")","title":"代码清单6-10"},{"location":"/chapter-06/index.html#代码清单6-11","text":"val sum = (0 /: array) { (sum, elem) ⇒ sum + elem }\nval max =\n  (Integer.MIN_VALUE /: array) { (large, elem) ⇒ Math.max(large, elem) }","title":"代码清单6-11"},{"location":"/chapter-06/index.html#代码清单6-12","text":"val sum =  inject(array, 0) {(carryOver, elem) => carryOver + elem}\n运行结果\nInject3.scala:9: error: not enough arguments for method inject: (arr:\nArray[Int], initial: Int, operation: (Int, Int) => Int)Int.\nUnspecified value parameter operation.\nval sum = inject(array, 0) {(carryOver, elem) => carryOver + elem}\n                ^\none error found","title":"代码清单6-12"},{"location":"/chapter-06/index.html#代码清单6-13","text":"scala> def foo(a: Int)(b: Int)(c:Int) = {}\nfoo: (a: Int)(b: Int)(c: Int)Unit\n\nscala> foo _\nres0: Int => (Int => (Int => Unit)) = <function1>\n\nscala> :quit","title":"代码清单6-13"},{"location":"/chapter-06/index.html#代码清单6-14","text":"def inject(arr: Array[Int], initial: Int)(operation: (Int, Int) ⇒ Int): Int = {\n  var carryOver = initial\n  arr.foreach(element ⇒ carryOver = operation(carryOver, element))\n  carryOver\n}","title":"代码清单6-14"},{"location":"/chapter-06/index.html#代码清单6-15","text":"val sum: Int = inject(array, 0) { (carryOver, elem) ⇒ carryOver + elem }","title":"代码清单6-15"},{"location":"/chapter-06/index.html#代码清单6-16","text":"val arr = Array(1, 2, 3, 4, 5)\n\nval total = (0 /: arr) { (sum, elem) ⇒ sum + elem }","title":"代码清单6-16"},{"location":"/chapter-06/index.html#代码清单6-17","text":"val total = (0 /: arr) { _ + _ }","title":"代码清单6-17"},{"location":"/chapter-06/index.html#代码清单6-18","text":"val negativeNumberExists1 = arr.exists { elem ⇒ elem < 0 }\nval negativeNumberExists2 = arr.exists { _ < 0 }","title":"代码清单6-18"},{"location":"/chapter-06/index.html#代码清单6-19","text":"val largest =\n  (Integer.MIN_VALUE /: arr) { (carry, elem) ⇒ Math.max(carry, elem) }","title":"代码清单6-19"},{"location":"/chapter-06/index.html#代码清单6-20","text":"val largest = (Integer.MIN_VALUE /: arr) { Math.max(_, _) }","title":"代码清单6-20"},{"location":"/chapter-06/index.html#代码清单6-21","text":"val largest = (Integer.MIN_VALUE /: arr) { Math.max _ }","title":"代码清单6-21"},{"location":"/chapter-06/index.html#代码清单6-22","text":"val largest = (Integer.MIN_VALUE /: arr) { Math.max }","title":"代码清单6-22"},{"location":"/chapter-06/index.html#代码清单6-23","text":"class Equipment(val routine: Int ⇒ Int) {\n  def simulate(input: Int): Int = {\n    print(\"Running simulation...\")\n    routine(input)\n  }\n}","title":"代码清单6-23"},{"location":"/chapter-06/index.html#代码清单6-24","text":"object EquipmentUseNotDry extends App {\n  val equipment1 = new Equipment(\n    { input ⇒ println(s\"calc with $input\"); input })\n  val equipment2 = new Equipment(\n    { input ⇒ println(s\"calc with $input\"); input })\n\n  equipment1.simulate(4)\n  equipment2.simulate(6)\n}\n运行结果\nRunning simulation...calc with 4\nRunning simulation...calc with 6","title":"代码清单6-24"},{"location":"/chapter-06/index.html#代码清单6-25","text":"object EquipmentUseDry extends App {\n  val calculator = { input: Int ⇒ println(s\"calc with $input\"); input }\n\n  val equipment1 = new Equipment(calculator)\n  val equipment2 = new Equipment(calculator)\n\n  equipment1.simulate(4)\n  equipment2.simulate(6)\n}\n运行结果\nRunning simulation...calc with 4\nRunning simulation...calc with 6","title":"代码清单6-25"},{"location":"/chapter-06/index.html#代码清单6-26","text":"object EquipmentUseDry2 extends App {\n  def calculator(input: Int) = { println(s\"calc with $input\"); input }\n\n  val equipment1 = new Equipment(calculator)\n  val equipment2 = new Equipment(calculator)\n\n  equipment1.simulate(4)\n  equipment2.simulate(6)\n}\n运行结果\nRunning simulation...calc with 4\nRunning simulation...calc with 6\n|","title":"代码清单6-26"},{"location":"/chapter-06/index.html#代码清单6-27","text":"import java.util.Date\n\ndef log(date: Date, message: String): Unit = {\n  //...\n  println(s\"$date ---- $message\")\n}\n\nval date = new Date(1420095600000L)\nlog(date, \"message1\")\nlog(date, \"message2\")\nlog(date, \"message3\")","title":"代码清单6-27"},{"location":"/chapter-06/index.html#代码清单6-28","text":"val date = new Date(1420095600000L)\nval logWithDateBound = log(date, _: String)\nlogWithDateBound(\"message1\")\nlogWithDateBound(\"message2\")\nlogWithDateBound(\"message3\")\n运行结果\nscala> import java.util.Date\nimport java.util.Date\n\nscala> def log(date: Date, message: String) =  println(s\"$date ---- \n$message\")\nlog: (date: java.util.Date, message: String)Unit\n\nscala> val logWithDateBound = log(new Date, _ : String)\nlogWithDateBound: String => Unit = <function1>\n\nscala> :quit","title":"代码清单6-28"},{"location":"/chapter-06/index.html#代码清单6-29","text":"def loopThrough(number: Int)(closure: Int ⇒ Unit): Unit = {\n  for (i ← 1 to number) { closure(i) }\n}","title":"代码清单6-29"},{"location":"/chapter-06/index.html#代码清单6-30","text":"var result = 0\nval addIt = { value: Int ⇒ result += value }","title":"代码清单6-30"},{"location":"/chapter-06/index.html#代码清单6-31","text":"loopThrough(10) { elem ⇒ addIt(elem) }\nprintln(s\"Total of values from 1 to 10 is $result\")\n\nresult = 0\nloopThrough(5) { addIt }\nprintln(s\"Total of values from 1 to 5 is $result\")","title":"代码清单6-31"},{"location":"/chapter-06/index.html#代码清单6-32","text":"var product = 1\nloopThrough(5) { product *= _ }\nprintln(s\"Product of values from 1 to 5 is $product\")\n运行结果\nTotal of values from 1 to 10 is 55\nTotal of values from 1 to 5 is 15\nProduct of values from 1 to 5 is 120","title":"代码清单6-32"},{"location":"/chapter-06/index.html#代码清单6-33","text":"class Resource private () {\n  println(\"Starting transaction...\")\n  private def cleanUp(): Unit = { println(\"Ending transaction...\") }\n  def op1(): Unit = println(\"Operation 1\")\n  def op2(): Unit = println(\"Operation 2\")\n  def op3(): Unit = println(\"Operation 3\")\n}\n\nobject Resource {\n  def use(codeBlock: Resource ⇒ Unit): Unit = {\n    val resource = new Resource\n    try {\n      codeBlock(resource)\n    } finally {\n      resource.cleanUp()\n    }\n  }\n}","title":"代码清单6-33"},{"location":"/chapter-06/index.html#代码清单6-34","text":"Resource.use { resource ⇒\n  resource.op1()\n  resource.op2()\n  resource.op3()\n  resource.op1()\n}\n运行结果\nStarting transaction...\nOperation 1\nOperation 2\nOperation 3\nOperation 1\nEnding transaction...","title":"代码清单6-34"},{"location":"/chapter-06/index.html#代码清单6-35","text":"import java.io._\n\ndef writeToFile(fileName: String)(codeBlock: PrintWriter ⇒ Unit): Unit = {\n  val writer = new PrintWriter(new File(fileName))\n  try { codeBlock(writer) } finally { writer.close() }\n}","title":"代码清单6-35"},{"location":"/chapter-06/index.html#代码清单6-36","text":"writeToFile(\"output/output.txt\") { writer ⇒\n  writer write \"hello from Scala\"\n}\n运行结果\nhello from Scala","title":"代码清单6-36"},{"location":"/chapter-07/index.html","text":"","title":"第7章——特质 ·"},{"location":"/chapter-07/index.html#第7章-特质","text":"","title":"第7章——特质"},{"location":"/chapter-07/index.html#代码清单7-1","text":"class Human(val name: String) {\n  def listen(): Unit = println(s\"Your friend $name is listening\")\n}\n\nclass Man(override val name: String) extends Human(name)\nclass Woman(override val name: String) extends Human(name)","title":"代码清单7-1"},{"location":"/chapter-07/index.html#代码清单7-2","text":"trait Friend {\n  val name: String\n  def listen(): Unit = println(s\"Your friend $name is listening\")\n}","title":"代码清单7-2"},{"location":"/chapter-07/index.html#代码清单7-3","text":"class Human(val name: String) extends Friend\n\nclass Woman(override val name: String) extends Human(name)\nclass Man(override val name: String) extends Human(name)","title":"代码清单7-3"},{"location":"/chapter-07/index.html#代码清单7-4","text":"class Dog(val name: String) extends Animal with Friend {\n  //optionally override method here.\n  override def listen(): Unit = println(s\"$name's listening quietly\")\n}","title":"代码清单7-4"},{"location":"/chapter-07/index.html#代码清单7-5","text":"class Animal","title":"代码清单7-5"},{"location":"/chapter-07/index.html#代码清单7-6","text":"object UseFriend extends App {\n  val john = new Man(\"John\")\n  val sara = new Woman(\"Sara\")\n  val comet = new Dog(\"Comet\")\n\n  john.listen()\n  sara.listen()\n  comet.listen()\n\n  val mansBestFriend: Friend = comet\n  mansBestFriend.listen()\n\n  def helpAsFriend(friend: Friend): Unit = friend.listen()\n\n  helpAsFriend(sara)\n  helpAsFriend(comet)\n}\n运行结果\nYour friend John is listening\nYour friend Sara is listening\nComet's listening quietly\nComet's listening quietly\nYour friend Sara is listening\nComet's listening quietly","title":"代码清单7-6"},{"location":"/chapter-07/index.html#代码清单7-7","text":"class Cat(val name: String) extends Animal","title":"代码清单7-7"},{"location":"/chapter-07/index.html#代码清单7-8","text":"object UseCat extends App {\n  def useFriend(friend: Friend): Unit = friend.listen()\n\n  val alf = new Cat(\"Alf\")\n  val friend: Friend = alf // ERROR\n\n  useFriend(alf) // ERROR\n}\n编译结果\nUseCat.scala:5: error: type mismatch;\n found   : Cat\n required: Friend\n  val friend : Friend = alf // ERROR\n                        ^\nUseCat.scala:7: error: type mismatch;\n found   : Cat\n required: Friend\n  useFriend(alf) // ERROR\n            ^\ntwo errors found","title":"代码清单7-8"},{"location":"/chapter-07/index.html#代码清单7-9","text":"def useFriend(friend: Friend): Unit = friend.listen()\n\nval angel = new Cat(\"Angel\") with Friend\nval friend: Friend = angel\nangel.listen()\n\nuseFriend(angel)\n运行结果\nYour friend Angel is listening\nYour friend Angel is listening","title":"代码清单7-9"},{"location":"/chapter-07/index.html#代码清单7-10","text":"abstract class Check {\n  def check: String = \"Checked Application Details...\"\n}","title":"代码清单7-10"},{"location":"/chapter-07/index.html#代码清单7-11","text":"trait CreditCheck extends Check {\n  override def check: String = s\"Checked Credit... ${super.check}\"\n}\n\ntrait EmploymentCheck extends Check {\n  override def check: String = s\"Checked Employment...${super.check}\"\n}\n\ntrait CriminalRecordCheck extends Check {\n  override def check: String = s\"Check Criminal Records...${super.check}\"\n}","title":"代码清单7-11"},{"location":"/chapter-07/index.html#代码清单7-12","text":"val apartmentApplication =\n  new Check with CreditCheck with CriminalRecordCheck\n\nprintln(apartmentApplication.check)","title":"代码清单7-12"},{"location":"/chapter-07/index.html#代码清单7-13","text":"val employmentApplication =\n  new Check with CriminalRecordCheck with EmploymentCheck\n\nprintln(employmentApplication.check)","title":"代码清单7-13"},{"location":"/chapter-07/index.html#代码清单7-14","text":"abstract class Writer {\n  def writeMessage(message: String): Unit\n}","title":"代码清单7-14"},{"location":"/chapter-07/index.html#代码清单7-15","text":"trait UpperCaseWriter extends Writer {\n  abstract override def writeMessage(message: String): Unit =\n    super.writeMessage(message.toUpperCase)\n}\n\ntrait ProfanityFilteredWriter extends Writer {\n  abstract override def writeMessage(message: String): Unit =\n    super.writeMessage(message.replace(\"stupid\", \"s-----\"))\n}","title":"代码清单7-15"},{"location":"/chapter-07/index.html#代码清单7-16","text":"class StringWriterDelegate extends Writer {\n  val writer = new java.io.StringWriter\n\n  def writeMessage(message: String): Unit = writer.write(message)\n  override def toString: String = writer.toString\n}","title":"代码清单7-16"},{"location":"/chapter-07/index.html#代码清单7-17","text":"val myWriterProfanityFirst =\n  new StringWriterDelegate with UpperCaseWriter with ProfanityFilteredWriter\n\nval myWriterProfanityLast =\n  new StringWriterDelegate with ProfanityFilteredWriter with UpperCaseWriter\n\nmyWriterProfanityFirst writeMessage \"There is no sin except stupidity\"\nmyWriterProfanityLast writeMessage \"There is no sin except stupidity\"\n\nprintln(myWriterProfanityFirst)\nprintln(myWriterProfanityLast)","title":"代码清单7-17"},{"location":"/chapter-08/index.html","text":"","title":"第8章——集合 ·"},{"location":"/chapter-08/index.html#第8章-集合","text":"","title":"第8章——集合"},{"location":"/chapter-08/index.html#代码清单8-1","text":"val colors1 = Set(\"Blue\", \"Green\", \"Red\")\nprintln(s\"colors1: $colors1\")\n\nval colors2 = colors1 + \"Black\"\nprintln(s\"colors2: $colors2\")\nprintln(s\"colors1: $colors1\")\n运行结果\ncolors1: Set(Blue, Green, Red)\ncolors2: Set(Blue, Green, Red, Black)\ncolors1: Set(Blue, Green, Red)","title":"代码清单8-1"},{"location":"/chapter-08/index.html#在repl中执行","text":"scala>  val colors = Set(\"Blue\", \"Green\", \"Red\")\ncolors: scala.collection.immutable.Set[String] = Set(Blue, Green, Red)\n\nscala> colors.getClass\nres0: Class[_ <: scala.collection.immutable.Set[String]] = class \nscala.collection.immutable.Set$Set3\n\nscala> :quit","title":"在REPL中执行"},{"location":"/chapter-08/index.html#代码清单8-2","text":"val feeds1 = Set(\"blog.toolshed.com\", \"pragdave.me\", \"blog.agiledeveloper.com\")\nval feeds2 = Set(\"blog.toolshed.com\", \"martinfowler.com/bliki\")","title":"代码清单8-2"},{"location":"/chapter-08/index.html#代码清单8-3","text":"val blogFeeds = feeds1 filter (_ contains \"blog\")\nprintln(s\"blog feeds: ${blogFeeds.mkString(\", \")}\")\n运行结果\nblog feeds: blog.toolshed.com, blog.agiledeveloper.com","title":"代码清单8-3"},{"location":"/chapter-08/index.html#代码清单8-4","text":"val mergedFeeds = feeds1 ++ feeds2\nprintln(s\"# of merged feeds: ${mergedFeeds.size}\")\n运行结果\n# of merged feeds: 4","title":"代码清单8-4"},{"location":"/chapter-08/index.html#代码清单8-5","text":"val commonFeeds = feeds1 & feeds2\nprintln(s\"common feeds: ${commonFeeds.mkString(\", \")}\")\n运行结果\ncommon feeds: blog.toolshed.com","title":"代码清单8-5"},{"location":"/chapter-08/index.html#代码清单8-6","text":"val urls = feeds1 map (\"http://\" + _)\nprintln(s\"One url: ${urls.head}\")\n运行结果\nOne url: http://blog.toolshed.com","title":"代码清单8-6"},{"location":"/chapter-08/index.html#代码清单8-7","text":"println(\"Refresh Feeds:\")\nfeeds1 foreach { feed ⇒ println(s\"  Refreshing $feed...\") }\n运行结果\nRefresh Feeds:\n  Refreshing blog.toolshed.com...\n  Refreshing pragdave.me...\n  Refreshing blog.agiledeveloper.com...","title":"代码清单8-7"},{"location":"/chapter-08/index.html#代码清单8-8","text":"val feeds = Map(\n  \"Andy Hunt\" -> \"blog.toolshed.com\",\n  \"Dave Thomas\" -> \"pragdave.me\",\n  \"NFJS\" -> \"nofluffjuststuff.com/blog\")","title":"代码清单8-8"},{"location":"/chapter-08/index.html#代码清单8-9","text":"val filterNameStartWithD = feeds filterKeys (_ startsWith \"D\")\nprintln(s\"# of Filtered: ${filterNameStartWithD.size}\")\n运行结果\n# of Filtered: 1","title":"代码清单8-9"},{"location":"/chapter-08/index.html#代码清单8-10","text":"val filterNameStartWithDAndPragprogInFeed = feeds filter { element ⇒\n  val (key, value) = element\n  (key startsWith \"D\") && (value contains \"pragprog\")\n}\nprint(\"# of feeds with auth name D* and pragprog in URL: \")\nprintln(filterNameStartWithDAndPragprogInFeed.size)\n运行结果\n# of feeds with auth name D* and pragprog in URL: 1","title":"代码清单8-10"},{"location":"/chapter-08/index.html#代码清单8-11","text":"println(s\"Get Andy's Feed: ${feeds.get(\"Andy Hunt\")}\")\nprintln(s\"Get Bill's Feed: ${feeds.get(\"Bill Who\")}\")\n运行结果\nGet Andy's Feed: Some(blog.toolshed.com)\nGet Bill's Feed: None","title":"代码清单8-11"},{"location":"/chapter-08/index.html#代码清单8-12","text":"try {\n  println(s\"Get Andy's Feed Using apply(): ${feeds(\"Andy Hunt\")}\")\n  print(\"Get Bill's Feed: \")\n  println(feeds(\"Bill Who\"))\n} catch {\n  case _: java.util.NoSuchElementException ⇒ println(\"Not found\")\n}\n运行结果\nGet Andy's Feed Using apply(): blog.toolshed.com\nGet Bill's Feed: Not found","title":"代码清单8-12"},{"location":"/chapter-08/index.html#代码清单8-13","text":"val newFeeds1 = feeds.updated(\"Venkat Subramaniam\", \"blog.agiledeveloper.com\")\nprintln(\"Venkat's blog in original feeds: \" + feeds.get(\"Venkat Subramaniam\"))\nprintln(\"Venkat's blog in new feed: \" + newFeeds1(\"Venkat Subramaniam\"))\n运行结果\nVenkat's blog in original feeds: None\nVenkat's blog in new feed: blog.agiledeveloper.com","title":"代码清单8-13"},{"location":"/chapter-08/index.html#代码清单8-14","text":"val mutableFeeds = scala.collection.mutable.Map(\n  \"Scala Book Forum\" -> \"forums.pragprog.com/forums/87\")\nmutableFeeds(\"Groovy Book Forum\") = \"forums.pragprog.com/forums/246\"\nprintln(s\"Number of forums: ${mutableFeeds.size}\")\n运行结果\nNumber of forums: 2","title":"代码清单8-14"},{"location":"/chapter-08/index.html#代码清单8-15","text":"val feeds = List(\"blog.toolshed.com\", \"pragdave.me\", \"blog.agiledeveloper.com\")","title":"代码清单8-15"},{"location":"/chapter-08/index.html#代码清单8-16","text":"println(s\"First feed: ${feeds.head}\")\nprintln(s\"Second feed: ${feeds(1)}\")\n运行结果\nFirst feed: blog.toolshed.com\nSecond feed: pragdave.me","title":"代码清单8-16"},{"location":"/chapter-08/index.html#代码清单8-17","text":"val prefixedList = \"forums.pragprog.com/forums/87\" :: feeds\nprintln(s\"First Feed In Prefixed: ${prefixedList.head}\")\n运行结果\nFirst Feed In Prefixed: forums.pragprog.com/forums/87","title":"代码清单8-17"},{"location":"/chapter-08/index.html#代码清单8-18","text":"val feedsWithForums =\n  feeds ::: List(\n    \"forums.pragprog.com/forums/87\",\n    \"forums.pragprog.com/forums/246\")\nprintln(s\"First feed in feeds with forum: ${feedsWithForums.head}\")\nprintln(s\"Last feed in feeds with forum: ${feedsWithForums.last}\")\n运行结果\nFirst feed in feeds with forum: blog.toolshed.com\nLast feed in feeds with forum: forums.pragprog.com/forums/246","title":"代码清单8-18"},{"location":"/chapter-08/index.html#代码清单8-19","text":"val appendedList = feeds ::: List(\"agilelearner.com\")\nprintln(s\"Last Feed In Appended: ${appendedList.last}\")\n运行结果\nLast Feed In Appended: agilelearner.com","title":"代码清单8-19"},{"location":"/chapter-08/index.html#代码清单8-20","text":"println(s\"Feeds with blog: ${feeds.filter(_ contains \"blog\").mkString(\", \")}\")\nprintln(s\"All feeds have com: ${feeds.forall(_ contains \"com\")}\")\nprintln(s\"All feeds have dave: ${feeds.forall(_ contains \"dave\")}\")\nprintln(s\"Any feed has dave: ${feeds.exists(_ contains \"dave\")}\")\nprintln(s\"Any feed has bill: ${feeds.exists(_ contains \"bill\")}\")\n运行结果\nFeeds with blog: blog.toolshed.com, blog.agiledeveloper.com\nAll feeds have com: true\nAll feeds have dave: false\nAny feed has dave: true\nAny feed has bill: false","title":"代码清单8-20"},{"location":"/chapter-08/index.html#代码清单8-21","text":"println(s\"Feed url lengths: ${feeds.map(_.length).mkString(\", \")}\")\n运行结果\nFeed url lengths: 17, 21, 23","title":"代码清单8-21"},{"location":"/chapter-08/index.html#代码清单8-22","text":"val total = feeds.foldLeft(0) { (total, feed) ⇒ total + feed.length }\nprintln(s\"Total length of feed urls: $total\")\n运行结果\nTotal length of feed urls: 61","title":"代码清单8-22"},{"location":"/chapter-08/index.html#代码清单8-23","text":"val total2 = (0 /: feeds) { (total, feed) ⇒ total + feed.length }\nprintln(s\"Total length of feed urls: $total2\")\n运行结果\nTotal length of feed urls: 61","title":"代码清单8-23"},{"location":"/chapter-08/index.html#代码清单8-24","text":"val total3 = (0 /: feeds) { _ + _.length }\nprintln(s\"Total length of feed urls: $total3\")\n运行结果\nTotal length of feed urls: 61","title":"代码清单8-24"},{"location":"/chapter-08/index.html#代码清单8-25","text":"class Cow {\n  def ^(moon: Moon): Unit = println(\"Cow jumped over the moon\")\n}\nclass Moon {\n  def ^:(cow: Cow): Unit = println(\"This cow jumped over the moon too\")\n}","title":"代码清单8-25"},{"location":"/chapter-08/index.html#代码清单8-26","text":"val cow = new Cow\nval moon = new Moon\n\ncow ^ moon\ncow ^: moon\n运行结果\nCow jumped over the moon\nThis cow jumped over the moon too","title":"代码清单8-26"},{"location":"/chapter-08/index.html#代码清单8-27","text":"class Sample {\n  def unary_+(): Unit = println(\"Called unary +\")\n  def unary_-(): Unit = println(\"called unary -\")\n  def unary_!(): Unit = println(\"called unary !\")\n  def unary_~(): Unit = println(\"called unary ~\")\n}\n\nval sample = new Sample\n+sample\n-sample\n!sample\n~sample\n运行结果\nCalled unary +\ncalled unary -\ncalled unary !\ncalled unary ~","title":"代码清单8-27"},{"location":"/chapter-08/index.html#代码清单8-28","text":"for (_ ← 1 to 3) { print(\"ho \") }","title":"代码清单8-28"},{"location":"/chapter-08/index.html#代码清单8-29","text":"val result = for (i ← 1 to 10)\n  yield i * 2","title":"代码清单8-29"},{"location":"/chapter-08/index.html#代码清单8-30","text":"val result2 = (1 to 10).map(_ * 2)","title":"代码清单8-30"},{"location":"/chapter-08/index.html#代码清单8-31","text":"val doubleEven = for (i ← 1 to 10; if i % 2 == 0)\n  yield i * 2","title":"代码清单8-31"},{"location":"/chapter-08/index.html#代码清单8-32","text":"for {\n  i ← 1 to 10\n  if i % 2 == 0\n} yield i * 2","title":"代码清单8-32"},{"location":"/chapter-08/index.html#代码清单8-33","text":"class Person(val firstName: String, val lastName: String)\nobject Person {\n  def apply(firstName: String, lastName: String): Person =\n    new Person(firstName, lastName)\n}\nval friends = List(Person(\"Brian\", \"Sletten\"), Person(\"Neal\", \"Ford\"),\n  Person(\"Scott\", \"Davis\"), Person(\"Stuart\", \"Halloway\"))\n\nval lastNames =\n  for (friend ← friends; lastName = friend.lastName) yield lastName\n\nprintln(lastNames.mkString(\", \"))\n运行结果\nSletten, Ford, Davis, Halloway","title":"代码清单8-33"},{"location":"/chapter-08/index.html#代码清单8-34","text":"for (i ← 1 to 3; j ← 4 to 6) {\n  print(s\"[$i,$j] \")\n}\n运行结果\n[1,4] [1,5] [1,6] [2,4] [2,5] [2,6] [3,4] [3,5] [3,6]","title":"代码清单8-34"},{"location":"/chapter-09/index.html","text":"","title":"第9章——模式匹配和正则表达式 ·"},{"location":"/chapter-09/index.html#第9章-模式匹配和正则表达式","text":"","title":"第9章——模式匹配和正则表达式"},{"location":"/chapter-09/index.html#代码清单9-1","text":"def activity(day: String): Unit = {\n  day match {\n    case \"Sunday\"   ⇒ print(\"Eat, sleep, repeat... \")\n    case \"Saturday\" ⇒ print(\"Hang out with friends... \")\n    case \"Monday\"   ⇒ print(\"...code for fun...\")\n    case \"Friday\"   ⇒ print(\"...read a good book...\")\n  }\n}\nList(\"Monday\", \"Sunday\", \"Saturday\").foreach { activity }\n运行结果\n...code for fun...Eat, sleep, repeat... Hang out with friends...","title":"代码清单9-1"},{"location":"/chapter-09/index.html#代码清单9-2","text":"object DayOfWeek extends Enumeration {\n  val SUNDAY: DayOfWeek.Value = Value(\"Sunday\")\n  val MONDAY: DayOfWeek.Value = Value(\"Monday\")\n  val TUESDAY: DayOfWeek.Value = Value(\"Tuesday\")\n  val WEDNESDAY: DayOfWeek.Value = Value(\"Wednesday\")\n  val THURSDAY: DayOfWeek.Value = Value(\"Thursday\")\n  val FRIDAY: DayOfWeek.Value = Value(\"Friday\")\n  val SATURDAY: DayOfWeek.Value = Value(\"Saturday\")\n}\n\ndef activity(day: DayOfWeek.Value): Unit = {\n  day match {\n    case DayOfWeek.SUNDAY   ⇒ println(\"Eat, sleep, repeat...\")\n    case DayOfWeek.SATURDAY ⇒ println(\"Hang out with friends\")\n    case _                  ⇒ println(\"...code for fun...\")\n  }\n}\n\nactivity(DayOfWeek.SATURDAY)\nactivity(DayOfWeek.MONDAY)\n运行结果\nHang out with friends\n...code for fun...","title":"代码清单9-2"},{"location":"/chapter-09/index.html#代码清单9-3","text":"def processCoordinates(input: Any): Unit = {\n  input match {\n    case (lat, long) ⇒ printf(\"Processing (%d, %d)...\", lat, long)\n    case \"done\"      ⇒ println(\"done\")\n    case _           ⇒ println(\"invalid input\")\n  }\n}\n\nprocessCoordinates((39, -104))\nprocessCoordinates(\"done\")\n运行结果\nProcessing (39, -104)...done","title":"代码清单9-3"},{"location":"/chapter-09/index.html#代码清单9-4","text":"def processItems(items: List[String]): Unit = {\n  items match {\n    case List(\"apple\", \"ibm\")         ⇒ println(\"Apples and IBMs\")\n    case List(\"red\", \"blue\", \"white\") ⇒ println(\"Stars and Stripes...\")\n    case List(\"red\", \"blue\", _*)      ⇒ println(\"colors red, blue,... \")\n    case List(\"apple\", \"orange\", otherFruits @ _*) ⇒\n      println(\"apples, oranges, and \" + otherFruits)\n  }\n}\n\nprocessItems(List(\"apple\", \"ibm\"))\nprocessItems(List(\"red\", \"blue\", \"green\"))\nprocessItems(List(\"red\", \"blue\", \"white\"))\nprocessItems(List(\"apple\", \"orange\", \"grapes\", \"dates\"))\n运行结果\nApples and IBMs\ncolors red, blue,... \nStars and Stripes...\napples, oranges, and List(grapes, dates)","title":"代码清单9-4"},{"location":"/chapter-09/index.html#代码清单9-5","text":"def process(input: Any): Unit = {\n  input match {\n    case (_: Int, _: Int)          ⇒ print(\"Processing (int, int)... \")\n    case (_: Double, _: Double)    ⇒ print(\"Processing (double, double)... \")\n    case msg: Int if msg > 1000000 ⇒ println(\"Processing int > 1000000\")\n    case _: Int                    ⇒ print(\"Processing int... \")\n    case _: String                 ⇒ println(\"Processing string... \")\n    case _                         ⇒ printf(s\"Can't handle $input... \")\n  }\n}\n\nprocess((34.2, -159.3))\nprocess(0)\nprocess(1000001)\nprocess(2.2)\n运行结果\nProcessing (double, double)... Processing int... Processing int > 1000000\nCan't handle 2.2...","title":"代码清单9-5"},{"location":"/chapter-09/index.html#代码清单9-6","text":"class Sample {\n  val max = 100\n\n  def process(input: Int): Unit = {\n    input match {\n      case max ⇒ println(s\"You matched max $max\")\n    }\n  }\n}\n\nval sample = new Sample\ntry {\n  sample.process(0)\n} catch {\n  case ex: Throwable ⇒ println(ex)\n}\nsample.process(100)\n运行结果\nYou matched max 0\nYou matched max 100","title":"代码清单9-6"},{"location":"/chapter-09/index.html#代码清单9-7","text":"class Sample {\n  val MAX = 100\n\n  def process(input: Int): Unit = {\n    input match {\n      case MAX ⇒ println(\"You matched max\")\n    }\n  }\n}\n\nval sample = new Sample\ntry {\n  sample.process(0)\n} catch {\n  case ex: Throwable ⇒ println(ex)\n}\nsample.process(100)\n运行结果\nscala.MatchError: 0 (of class java.lang.Integer)\nYou matched max","title":"代码清单9-7"},{"location":"/chapter-09/index.html#代码清单9-8","text":"trait Trade\ncase class Sell(stockSymbol: String, quantity: Int) extends Trade\ncase class Buy(stockSymbol: String, quantity: Int) extends Trade\ncase class Hedge(stockSymbol: String, quantity: Int) extends Trade","title":"代码清单9-8"},{"location":"/chapter-09/index.html#代码清单9-9","text":"object TradeProcessor {\n  def processTransaction(request: Trade): Unit = {\n    request match {\n      case Sell(stock, 1000) ⇒ println(s\"Selling 1000-units of $stock\")\n      case Sell(stock, quantity) ⇒\n        println(s\"Selling $quantity units of $stock\")\n      case Buy(stock, quantity) if quantity > 2000 ⇒\n        println(s\"Buying $quantity (large) units of $stock\")\n      case Buy(stock, quantity) ⇒\n        println(s\"Buying $quantity units of $stock\")\n    }\n  }\n}","title":"代码清单9-9"},{"location":"/chapter-09/index.html#代码清单9-10","text":"TradeProcessor.processTransaction(Sell(\"GOOG\", 500))\nTradeProcessor.processTransaction(Buy(\"GOOG\", 700))\nTradeProcessor.processTransaction(Sell(\"GOOG\", 1000))\nTradeProcessor.processTransaction(Buy(\"GOOG\", 3000))\n运行结果\nSelling 500 units of GOOG\nBuying 700 units of GOOG\nSelling 1000-units of GOOG\nBuying 3000 (large) units of GOOG","title":"代码清单9-10"},{"location":"/chapter-09/index.html#代码清单9-11","text":"case class Apple()\ncase class Orange()\ncase class Book()\n\nobject ThingsAcceptor {\n  def acceptStuff(thing: Any): Unit = {\n    thing match {\n      case Apple()  ⇒ println(\"Thanks for the Apple\")\n      case Orange() ⇒ println(\"Thanks for the Orange\")\n      case Book()   ⇒ println(\"Thanks for the Book\")\n      case _        ⇒ println(s\"Excuse me, why did you send me $thing\")\n    }\n  }\n}","title":"代码清单9-11"},{"location":"/chapter-09/index.html#代码清单9-12","text":"ThingsAcceptor.acceptStuff(Apple())\nThingsAcceptor.acceptStuff(Book())\nThingsAcceptor.acceptStuff(Apple)\n运行结果\nThanks for the Apple\nThanks for the Book\nExcuse me, why did you send me Apple","title":"代码清单9-12"},{"location":"/chapter-09/index.html#代码清单9-13","text":"abstract class Thing\ncase class Apple() extends Thing\n\nobject ThingsAcceptor {\n  def acceptStuff(thing: Thing) {\n    thing match {\n      //...\n      case _ ⇒\n    }\n  }\n}\n\nThingsAcceptor.acceptStuff(Apple) //error: type mismatch;","title":"代码清单9-13"},{"location":"/chapter-09/index.html#代码清单9-14","text":"StockService process \"GOOG\"\nStockService process \"IBM\"\nStockService process \"ERR\"","title":"代码清单9-14"},{"location":"/chapter-09/index.html#代码清单9-15","text":"object StockService {\n  def process(input: String): Unit = {\n    input match {\n      case Symbol() ⇒ println(s\"Look up price for valid symbol $input\")\n      case _        ⇒ println(s\"Invalid input $input\")\n    }\n  }\n}","title":"代码清单9-15"},{"location":"/chapter-09/index.html#代码清单9-16","text":"object Symbol {\n  def unapply(symbol: String): Boolean = {\n    // you'd look up a database... here only GOOG and IBM are recognized\n    symbol == \"GOOG\" || symbol == \"IBM\"\n  }\n}\n运行结果\nLook up price for valid symbol GOOG\nLook up price for valid symbol IBM\nInvalid input ERR","title":"代码清单9-16"},{"location":"/chapter-09/index.html#代码清单9-17","text":"object StockService {\n  def process(input: String): Unit = {\n    input match {\n      case Symbol() ⇒ println(s\"Look up price for valid symbol $input\")\n      case ReceiveStockPrice(symbol, price) ⇒\n        println(s\"Received price $$$price for symbol $symbol\")\n      case _ ⇒ println(s\"Invalid input $input\")\n    }\n  }\n}","title":"代码清单9-17"},{"location":"/chapter-09/index.html#代码清单9-18","text":"object ReceiveStockPrice {\n  def unapply(input: String): Option[(String, Double)] = {\n    try {\n      if (input contains \":\") {\n        val splitQuote = input split \":\"\n        Some((splitQuote(0), splitQuote(1).toDouble))\n      } else {\n        None\n      }\n    } catch {\n      case _: NumberFormatException ⇒ None\n    }\n  }\n}","title":"代码清单9-18"},{"location":"/chapter-09/index.html#代码清单9-19","text":"StockService process \"GOOG\"\nStockService process \"GOOG:310.84\"\nStockService process \"GOOG:BUY\"\nStockService process \"ERR:12.21\"\n运行结果\nLook up price for valid symbol GOOG\nReceived price $310.84 for symbol GOOG\nInvalid input GOOG:BUY\nReceived price $12.21 for symbol ERR","title":"代码清单9-19"},{"location":"/chapter-09/index.html#代码清单9-20","text":"case ReceiveStockPrice(symbol @ Symbol(), price) ⇒\n  println(s\"Received price $$$price for symbol $symbol\")\n运行结果\nLook up price for valid symbol GOOG\nReceived price $310.84 for symbol GOOG\nInvalid input GOOG:BUY\nInvalid input ERR:12.21","title":"代码清单9-20"},{"location":"/chapter-09/index.html#代码清单9-21","text":"val pattern = \"(S|s)cala\".r\nval str = \"Scala is scalable and cool\"\nprintln(pattern findFirstIn str)","title":"代码清单9-21"},{"location":"/chapter-09/index.html#代码清单9-22","text":"println((pattern findAllIn str).mkString(\", \"))","title":"代码清单9-22"},{"location":"/chapter-09/index.html#代码清单9-23","text":"println(\"cool\".r replaceFirstIn (str, \"awesome\"))\n运行结果\nSome(Scala)\nScala, scala\nScala is scalable and awesome","title":"代码清单9-23"},{"location":"/chapter-09/index.html#代码清单9-24","text":"def process(input: String): Unit = {\n  val GoogStock = \"\"\"^GOOG:(\\d*\\.\\d+)\"\"\".r\n  input match {\n    case GoogStock(price) ⇒ println(s\"Price of GOOG is $$$price\")\n    case _                ⇒ println(s\"not processing $input\")\n  }\n}\nprocess(\"GOOG:310.84\")\nprocess(\"GOOG:310\")\nprocess(\"IBM:84.01\")\n运行结果\nPrice of GOOG is $310.84\nnot processing GOOG:310\nnot processing IBM:84.01","title":"代码清单9-24"},{"location":"/chapter-09/index.html#代码清单9-25","text":"def process(input: String): Unit = {\n  val MatchStock = \"\"\"^(.+):(\\d*\\.\\d+)\"\"\".r\n  input match {\n    case MatchStock(\"GOOG\", price) ⇒ println(s\"We got GOOG at $$$price\")\n    case MatchStock(\"IBM\", price)  ⇒ println(s\"IBM's trading at $$$price\")\n    case MatchStock(symbol, price) ⇒ println(s\"Price of $symbol is $$$price\")\n    case _                         ⇒ println(s\"not processing $input\")\n  }\n}\nprocess(\"GOOG:310.84\")\nprocess(\"IBM:84.01\")\nprocess(\"GE:15.96\")\n运行结果\nWe got GOOG at $310.84\nIBM's trading at $84.01\nPrice of GE is $15.96","title":"代码清单9-25"},{"location":"/chapter-10/index.html","text":"","title":"第10章——处理异常 ·"},{"location":"/chapter-10/index.html#第10章-处理异常","text":"","title":"第10章——处理异常"},{"location":"/chapter-10/index.html#代码清单10-1","text":"throw new IllegalArgumentException","title":"代码清单10-1"},{"location":"/chapter-10/index.html#代码清单10-2","text":"// Java code\ntry {\n  Thread.sleep(1000);\n}                    \ncatch(InterruptedException ex) {\n  // Losing sleep over what to do here?\n}","title":"代码清单10-2"},{"location":"/chapter-10/index.html#代码清单10-3","text":"object Tax {\n  def taxFor(amount: Double): Double = {\n    if (amount < 0)\n      throw new IllegalArgumentException(\"Amount must be greater than zero\")\n\n    if (amount < 0.01)\n      throw new RuntimeException(\"Amount too small to be taxed\")\n\n    if (amount > 1000000) throw new Exception(\"Amount too large...\")\n\n    amount * 0.08\n  }\n}","title":"代码清单10-3"},{"location":"/chapter-10/index.html#代码清单10-4","text":"for (amount ← List(100.0, 0.009, -2.0, 1000001.0)) {\n  try {\n    print(s\"Amount: $$$amount \")\n    println(s\"Tax: $$${Tax.taxFor(amount)}\")\n  } catch {\n    case ex: IllegalArgumentException ⇒ println(ex.getMessage)\n    case ex: RuntimeException ⇒\n      // if you need a block of code to handle exception\n      println(s\"Don't bother reporting...${ex.getMessage}\")\n  }\n}\n运行结果\nAmount: $100.0 Tax: $8.0\nAmount: $0.009 Don't bother reporting...Amount too small to be taxed\nAmount: $-2.0 Amount must be greater than zero\nAmount: $1000001.0 java.lang.Exception: Amount too large...\n\tat Tax$.taxFor(Tax.scala:9)\n...","title":"代码清单10-4"},{"location":"/chapter-10/index.html#代码清单10-5","text":"for (amount ← List(100.0, 0.009, -2.0, 1000001.0)) {\n  try {\n    print(s\"Amount: $$$amount \")\n    println(s\"Tax: $$${Tax.taxFor(amount)}\")\n  } catch {\n    case ex: IllegalArgumentException ⇒ println(ex.getMessage)\n    case _: Throwable                 ⇒ println(\"Something went wrong\")\n  }\n}\n运行结果\nAmount: $100.0 Tax: $8.0\nAmount: $0.009 Something went wrong\nAmount: $-2.0 Amount must be greater than zero\nAmount: $1000001.0 Something went wrong","title":"代码清单10-5"},{"location":"/chapter-10/index.html#代码清单10-6","text":"//Java code—will not compile due to incorrect catch order\npublic class JavaCatchOrder {\n  public void catchOrderExample() {\n    try {\n      String str = \"hello\";\n      System.out.println(str.charAt(31));\n    }\n    catch(Exception ex) { System.out.println(\"Exception caught\"); }\n    catch(StringIndexOutOfBoundsException ex) { //ERROR\n      System.out.println(\"Invalid Index\"); }\n  }\n}\n运行结果\nJavaCatchOrder.java:10: error: exception StringIndexOutOfBoundsException\nhas already been caught\n    catch(StringIndexOutOfBoundsException ex) { //ERROR\n    ^\n1 error","title":"代码清单10-6"},{"location":"/chapter-10/index.html#代码清单10-6","text":"val amount = -2\ntry {\n  print(s\"Amount: $$$amount \")\n  println(s\"Tax: $$${Tax.taxFor(amount)}\")\n} catch {\n  case _: Exception                 ⇒ println(\"Something went wrong\")\n  case ex: IllegalArgumentException ⇒ println(ex.getMessage)\n}\n运行结果\nAmount: $-2 Something went wrong","title":"代码清单10-6"},{"location":"/chapter-11/index.html","text":"","title":"第11章——递归编程 ·"},{"location":"/chapter-11/index.html#第11章-递归编程","text":"","title":"第11章——递归编程"},{"location":"/chapter-11/index.html#代码清单11-1","text":"def factorial(number: Int): BigInt = {\n  if (number == 0)\n    1\n  else\n    number * factorial(number - 1)\n}\n运行结果\n120","title":"代码清单11-1"},{"location":"/chapter-11/index.html#代码清单11-2","text":"println(factorial(5))","title":"代码清单11-2"},{"location":"/chapter-11/index.html#代码清单11-3","text":"println(factorial(10000))\n运行结果\njava.lang.StackOverflowError","title":"代码清单11-3"},{"location":"/chapter-11/index.html#代码清单11-4","text":"def mad(parameter: Int): Int = {\n  if (parameter == 0)\n    throw new RuntimeException(\"Error\")\n  else\n    1 * mad(parameter - 1)\n}\n\nmad(5)\n运行结果\njava.lang.RuntimeException: Error\n\tat Main$$anon$1.mad(mad.scala:3)\n\tat Main$$anon$1.mad(mad.scala:5)\n\tat Main$$anon$1.mad(mad.scala:5)\n\tat Main$$anon$1.mad(mad.scala:5)\n\tat Main$$anon$1.mad(mad.scala:5)\n\tat Main$$anon$1.mad(mad.scala:5)\n\tat Main$$anon$1.<init>(mad.scala:8)","title":"代码清单11-4"},{"location":"/chapter-11/index.html#代码清单11-5","text":"def mad(parameter: Int): Int = {\n  if (parameter == 0)\n    throw new RuntimeException(\"Error\")\n  else\n    mad(parameter - 1)\n}\n\nmad(5)\n运行结果\njava.lang.RuntimeException: Error\n\tat Main$$anon$1.mad(mad2.scala:3)\n\tat Main$$anon$1.<init>(mad2.scala:8)","title":"代码清单11-5"},{"location":"/chapter-11/index.html#代码清单11-6","text":"private int mad(int);\n    Code:\n       0: iload_1\n       1: iconst_0\n       2: if_icmpne     15\n       5: new           #14                 // class \njava/lang/RuntimeException\n       8: dup\n       9: ldc           #16                 // String Error\n      11: invokespecial #20                 // Method \njava/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n      14: athrow\n      15: iconst_1\n      16: aload_0\n      17: iload_1\n      18: iconst_1\n      19: isub\n      20: invokespecial #22                 // Method mad:(I)I\n      23: imul\n      24: ireturn","title":"代码清单11-6"},{"location":"/chapter-11/index.html#代码清单11-7","text":"private int mad(int);\n    Code:\n       0: iload_1\n       1: iconst_0\n       2: if_icmpne     15\n       5: new           #14                 // class \njava/lang/RuntimeException\n       8: dup\n       9: ldc           #16                 // String Error\n      11: invokespecial #20                 // Method \njava/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n      14: athrow\n      15: iconst_1\n      16: aload_0\n      17: iload_1\n      18: iconst_1\n      19: isub\n      20: invokespecial #22                 // Method mad:(I)I\n      23: imul\n      24: ireturn","title":"代码清单11-7"},{"location":"/chapter-11/index.html#代码清单11-8","text":"@scala.annotation.tailrec\ndef factorial(number: Int): BigInt = {\n  if (number == 0)\n    1\n  else\n    number * factorial(number - 1)\n}\n\nprintln(factorial(10000))\n运行结果\nerror: could not optimize @tailrec annotated method factorial: it contains\na recursive call not in tail position\n    number * factorial(number - 1)\n           ^\nerror found","title":"代码清单11-8"},{"location":"/chapter-11/index.html#代码清单11-9","text":"@scala.annotation.tailrec\ndef factorial(fact: BigInt, number: Int): BigInt = {\n  if (number == 0)\n    fact\n  else\n    factorial(fact * number, number - 1)\n}\n\nprintln(factorial(1, 10000))\n运行结果\n284625968091705451890641321211986889014805140170279923079417999427441134000\n...","title":"代码清单11-9"},{"location":"/chapter-11/index.html#代码清单11-10","text":"import scala.io.Source._\n\ndef explore(count: Int, words: List[String]): Int =\n  if (words.isEmpty)\n    count\n  else\n    countPalindrome(count, words)\n\ndef countPalindrome(count: Int, words: List[String]): Int = {\n  val firstWord = words.head\n\n  if (firstWord.reverse == firstWord)\n    explore(count + 1, words.tail)\n  else\n    explore(count, words.tail)\n}\n\ndef callExplore(text: String): Unit = println(explore(0, text.split(\" \").toList))\n\ncallExplore(\"dad mom and racecar\")\n\ntry {\n  val text =\n    fromURL(\"https://en.wikipedia.org/wiki/Gettysburg_Address\").mkString\n  callExplore(text)\n} catch {\n  case ex: Throwable ⇒ println(ex)\n}\n运行结果\n3\njava.lang.StackOverflowError","title":"代码清单11-10"},{"location":"/chapter-11/index.html#代码清单11-11","text":"import scala.io.Source._\nimport scala.util.control.TailCalls._\n\ndef explore(count: Int, words: List[String]): TailRec[Int] =\n  if (words.isEmpty)\n    done(count)\n  else\n    tailcall(countPalindrome(count, words))\n\ndef countPalindrome(count: Int, words: List[String]): TailRec[Int] = {\n  val firstWord = words.head\n\n  if (firstWord.reverse == firstWord)\n    tailcall(explore(count + 1, words.tail))\n  else\n    tailcall(explore(count, words.tail))\n}\n\ndef callExplore(text: String): Unit =\n  println(explore(0, text.split(\" \").toList).result)\n\ncallExplore(\"dad mom and racecar\")\n\ntry {\n  val text =\n    fromURL(\"https://en.wikipedia.org/wiki/Gettysburg_Address\").mkString\n  callExplore(text)\n} catch {\n  case ex: Throwable ⇒ println(ex)\n}\n运行结果\n3\n352","title":"代码清单11-11"},{"location":"/chapter-12/index.html","text":"","title":"第12章——惰性求值和并行集合 ·"},{"location":"/chapter-12/index.html#第12章-惰性求值和并行集合","text":"","title":"第12章——惰性求值和并行集合"},{"location":"/chapter-12/index.html#代码清单12-1","text":"def expensiveComputation() = {\n  println(\"...assume slow operation...\")\n  false\n}\n\ndef evaluate(input: Int): Unit = {\n  println(s\"evaluate called with $input\")\n  if (input >= 10 && expensiveComputation())\n    println(\"doing work...\")\n  else\n    println(\"skipping\")\n}\n\nevaluate(0)\nevaluate(100)\n运行结果\nevaluate called with 0\nskipping\nevaluate called with 100\n...assume slow operation...\nskipping","title":"代码清单12-1"},{"location":"/chapter-12/index.html#代码清单12-2","text":"val perform = expensiveComputation()\nif (input >= 10 && perform)\n运行结果\nevaluate called with 0\n...assume slow operation...\nskipping\nevaluate called with 100\n...assume slow operation...\nskipping","title":"代码清单12-2"},{"location":"/chapter-12/index.html#代码清单12-3","text":"@volatile lazy val perform = expensiveComputation()\nif (input >= 10 && perform)\n  println(\"doing work...\")\n运行结果\nevaluate called with 0\nskipping\nevaluate called with 100\n...assume slow operation...\nskipping","title":"代码清单12-3"},{"location":"/chapter-12/index.html#代码清单12-4","text":"import scala.io._\n\ndef read = StdIn.readInt()\n\n@volatile lazy val first = read\n@volatile lazy val second = read\n\nif (Math.random() < 0.5)\n  second\n\nprintln(first - second)\n运行结果\n> scala lazyOrder.scala\n1\n2\n1\n> scala lazyOrder.scala \n1\n2\n-1\n>","title":"代码清单12-4"},{"location":"/chapter-12/index.html#代码清单12-5","text":"val people = List((\"Mark\", 32), (\"Bob\", 22), (\"Jane\", 8), (\"Jill\", 21),\n  (\"Nick\", 50), (\"Nancy\", 42), (\"Mike\", 19), (\"Sara\", 12), (\"Paula\", 42),\n  (\"John\", 21))\n\ndef isOlderThan17(person: (String, Int)) = {\n  println(s\"isOlderThan17 called for $person\")\n  val (_, age) = person\n  age > 17\n}\n\ndef isNameStartsWithJ(person: (String, Int)) = {\n  println(s\"isNameStartsWithJ called for $person\")\n  val (name, _) = person\n  name.startsWith(\"J\")\n}\n\nprintln(people.filter { isOlderThan17 }.filter { isNameStartsWithJ }.head)\n运行结果\nisOlderThan17 called for (Mark,32)\nisOlderThan17 called for (Bob,22)\nisOlderThan17 called for (Jane,8)\nisOlderThan17 called for (Jill,21)\nisOlderThan17 called for (Nick,50)\nisOlderThan17 called for (Nancy,42)\nisOlderThan17 called for (Mike,19)\nisOlderThan17 called for (Sara,12)\nisOlderThan17 called for (Paula,42)\nisOlderThan17 called for (John,21)\nisNameStartsWithJ called for (Mark,32)\nisNameStartsWithJ called for (Bob,22)\nisNameStartsWithJ called for (Jill,21)\nisNameStartsWithJ called for (Nick,50)\nisNameStartsWithJ called for (Nancy,42)\nisNameStartsWithJ called for (Mike,19)\nisNameStartsWithJ called for (Paula,42)\nisNameStartsWithJ called for (John,21)\n(Jill,21)","title":"代码清单12-5"},{"location":"/chapter-12/index.html#代码清单12-6","text":"println(people.view.filter { isOlderThan17 }.filter { isNameStartsWithJ }.head)\n运行结果\nisOlderThan17 called for (Mark,32)\nisNameStartsWithJ called for (Mark,32)\nisOlderThan17 called for (Bob,22)\nisNameStartsWithJ called for (Bob,22)\nisOlderThan17 called for (Jane,8)\nisOlderThan17 called for (Jill,21)\nisNameStartsWithJ called for (Jill,21)\n(Jill,21)","title":"代码清单12-6"},{"location":"/chapter-12/index.html#代码清单12-7","text":"def generate(starting: Int): Stream[Int] = {\n  starting #:: generate(starting + 1)\n}\n\nprintln(generate(25))\n运行结果\nStream(25, ?)","title":"代码清单12-7"},{"location":"/chapter-12/index.html#代码清单12-8","text":"println(generate(25).take(10).force)\nprintln(generate(25).take(10).toList)\n运行结果\nStream(25, 26, 27, 28, 29, 30, 31, 32, 33, 34)\nList(25, 26, 27, 28, 29, 30, 31, 32, 33, 34)","title":"代码清单12-8"},{"location":"/chapter-12/index.html#代码清单12-9","text":"println(generate(25).takeWhile { _ < 40 }.force)\n运行结果\nStream(25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39)","title":"代码清单12-9"},{"location":"/chapter-12/index.html#代码清单12-10","text":"def isDivisibleBy(number: Int, divisor: Int) = number % divisor == 0\n\ndef isPrime(number: Int) =\n  number > 1 && !(2 until number).exists { isDivisibleBy(number, _) }\n\ndef primes(starting: Int): Stream[Int] = {\n  println(s\"computing for $starting\")\n  if (isPrime(starting))\n    starting #:: primes(starting + 1)\n  else\n    primes(starting + 1)\n}","title":"代码清单12-10"},{"location":"/chapter-12/index.html#代码清单12-11","text":"val primesFrom100 = primes(100)\n\nprintln(primesFrom100.take(3).toList)\nprintln(\"Let's ask for more...\")\nprintln(primesFrom100.take(4).toList)\n运行结果\ncomputing for 100\ncomputing for 101\ncomputing for 102\ncomputing for 103\ncomputing for 104\ncomputing for 105\ncomputing for 106\ncomputing for 107\nList(101, 103, 107)\nLet's ask for more...\ncomputing for 108\ncomputing for 109\nList(101, 103, 107, 109)","title":"代码清单12-11"},{"location":"/chapter-12/index.html#代码清单12-12","text":"import scala.io.Source\nimport scala.xml._\n\ndef getWeatherData(city: String) = {\n  val url = \"http://api.openweathermap.org/data/2.5/weather\"\n\n  val response = Source.fromURL(s\"$url?q=$city&units=imperial&mode=xml\")\n  val xmlResponse = XML.loadString(response.mkString)\n  val cityName = (xmlResponse \\\\ \"city\" \\ \"@name\").text\n  val temperature = (xmlResponse \\\\ \"temperature\" \\ \"@value\").text\n  val condition = (xmlResponse \\\\ \"weather\" \\ \"@value\").text\n  (cityName, temperature, condition)\n}","title":"代码清单12-12"},{"location":"/chapter-12/index.html#代码清单12-13","text":"def printWeatherData(weatherData: (String, String, String)): Unit = {\n  val (cityName, temperature, condition) = weatherData\n\n  println(f\"$cityName%-15s $temperature%-6s $condition\")\n}","title":"代码清单12-13"},{"location":"/chapter-12/index.html#代码清单12-14","text":"def timeSample(getData: List[String] ⇒ List[(String, String, String)]): Unit = {\n  val cities = List(\"Houston,us\", \"Chicago,us\", \"Boston,us\", \"Minneapolis,us\",\n    \"Oslo,norway\", \"Tromso,norway\", \"Sydney,australia\", \"Berlin,germany\",\n    \"London,uk\", \"Krakow,poland\", \"Rome,italy\", \"Stockholm,sweden\",\n    \"Bangalore,india\", \"Brussels,belgium\", \"Reykjavik,iceland\")\n\n  val start = System.nanoTime\n  getData(cities) sortBy { _._1 } foreach printWeatherData\n  val end = System.nanoTime\n  println(s\"Time taken: ${(end - start) / 1.0e9} sec\")\n}\n运行结果\nBengaluru       84.2   few clouds\nBerlin          45.63  broken clouds\nBoston          52.23  scattered clouds\nBrussels        50.83  Sky is Clear\nChicago         46.13  sky is clear\nCracow          40.39  moderate rain\nHouston         54.01  light intensity drizzle\nLondon          55.33  Sky is Clear\nMinneapolis     42.82  sky is clear\nOslo            47.3   Sky is Clear\nReykjavik       31.17  proximity shower rain\nRome            58.42  few clouds\nStockholm       47.28  Sky is Clear\nSydney          68.9   Sky is Clear\nTromso          35.6   proximity shower rain\nTime taken: 67.208944087 sec","title":"代码清单12-14"},{"location":"/chapter-12/index.html#代码清单12-15","text":"timeSample { cities ⇒ cities map getWeatherData }\n运行结果\nBengaluru       84.2   few clouds\nBerlin          45.63  broken clouds\nBoston          52.23  scattered clouds\nBrussels        50.83  Sky is Clear\nChicago         46.13  sky is clear\nCracow          40.39  moderate rain\nHouston         54.01  light intensity drizzle\nLondon          55.33  Sky is Clear\nMinneapolis     42.82  sky is clear\nOslo            47.3   Sky is Clear\nReykjavik       31.17  proximity shower rain\nRome            58.42  few clouds\nStockholm       47.28  Sky is Clear\nSydney          68.9   Sky is Clear\nTromso          35.6   proximity shower rain\nTime taken: 0.171599394 sec","title":"代码清单12-15"},{"location":"/chapter-13/index.html","text":"","title":"第13章——使用Actor模型处理并发 ·"},{"location":"/chapter-13/index.html#第13章-使用actor模型处理并发","text":"","title":"第13章——使用Actor模型处理并发"},{"location":"/chapter-13/index.html#代码清单13-1","text":"import java.io.File\n\ndef getChildren(file: File) = {\n  val children = file.listFiles()\n  if (children != null) children.toList else List()\n}\n\nval start = System.nanoTime\nval exploreFrom = new File(args(0))\n\nvar count = 0L\nvar filesToVisit = List(exploreFrom)\n\nwhile (filesToVisit.nonEmpty) {\n  val head = filesToVisit.head\n  filesToVisit = filesToVisit.tail\n\n  val children = getChildren(head)\n  count = count + children.count { !_.isDirectory }\n  filesToVisit = filesToVisit ::: children.filter { _.isDirectory }\n}\n\nval end = System.nanoTime\nprintln(s\"Number of files found: $count\")\nprintln(s\"Time taken: ${(end - start) / 1.0e9} seconds\")\n运行结果\nNumber of files found: 479758\nTime taken: 66.524453436 seconds","title":"代码清单13-1"},{"location":"/chapter-13/index.html#代码清单13-2","text":"import akka.actor._\n\nclass HollywoodActor() extends Actor {\n  def receive: PartialFunction[Any, Unit] = {\n    case message ⇒ println(s\"playing the role of $message\")\n  }\n}","title":"代码清单13-2"},{"location":"/chapter-13/index.html#代码清单13-3","text":"import akka.actor._\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration.Duration\n\nobject CreateActors extends App {\n  val system = ActorSystem(\"sample\")\n\n  val depp = system.actorOf(Props[HollywoodActor])\n\n  depp ! \"Wonka\"\n\n  val terminateFuture = system.terminate()\n  Await.ready(terminateFuture, Duration.Inf)\n}\n运行结果\nplaying the role of Wonka","title":"代码清单13-3"},{"location":"/chapter-13/index.html#代码清单13-4","text":"val depp = system.actorOf(Props[HollywoodActor])\nval hanks = system.actorOf(Props[HollywoodActor])\n\ndepp ! \"Wonka\"\nhanks ! \"Gump\"\n\ndepp ! \"Sparrow\"\nhanks ! \"Phillips\"\nprintln(s\"Calling from ${Thread.currentThread}\")\n运行结果\nWonka - Thread[sample-akka.actor.default-dispatcher-2,5,main]\nGump - Thread[sample-akka.actor.default-dispatcher-3,5,main]\nCalling from Thread[main,5,main]\nPhillips - Thread[sample-akka.actor.default-dispatcher-3,5,main]\nSparrow - Thread[sample-akka.actor.default-dispatcher-2,5,main]","title":"代码清单13-4"},{"location":"/chapter-13/index.html#代码清单13-5","text":"depp ! \"Wonka\"\nhanks ! \"Gump\"\n\nThread.sleep(100)\n\ndepp ! \"Sparrow\"\nhanks ! \"Phillips\"\n运行结果\nWonka - Thread[sample-akka.actor.default-dispatcher-3,5,main]\nGump - Thread[sample-akka.actor.default-dispatcher-4,5,main]\nSparrow - Thread[sample-akka.actor.default-dispatcher-4,5,main]\nPhillips - Thread[sample-akka.actor.default-dispatcher-3,5,main]\nCalling from Thread[main,5,main]","title":"代码清单13-5"},{"location":"/chapter-13/index.html#代码清单13-6","text":"import akka.actor._\nimport scala.collection._\n\ncase class Play(role: String)\ncase class ReportCount(role: String)\n\nclass HollywoodActor() extends Actor {\n  val messagesCount: mutable.Map[String, Int] = mutable.Map()\n\n  def receive: PartialFunction[Any, Unit] = {\n    case Play(role) ⇒\n      val currentCount = messagesCount.getOrElse(role, 0)\n      messagesCount.update(role, currentCount + 1)\n      println(s\"Playing $role\")\n\n    case ReportCount(role) ⇒\n      sender ! messagesCount.getOrElse(role, 0)\n  }\n}","title":"代码清单13-6"},{"location":"/chapter-13/index.html#代码清单13-7","text":"import akka.actor._\nimport akka.pattern.ask\nimport akka.util.Timeout\nimport chapter13.HollywoodActor4.{ Play, ReportCount }\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration._\n\nobject UseActor extends App {\n  val system = ActorSystem(\"sample\")\n\n  val depp = system.actorOf(Props[HollywoodActor])\n  val hanks = system.actorOf(Props[HollywoodActor])\n\n  depp ! Play(\"Wonka\")\n  hanks ! Play(\"Gump\")\n\n  depp ! Play(\"Wonka\")\n  depp ! Play(\"Sparrow\")\n\n  println(\"Sent roles to play\")\n\n  implicit val timeout: Timeout = Timeout(2.seconds)\n  val wonkaFuture = depp ? ReportCount(\"Wonka\")\n  val sparrowFuture = depp ? ReportCount(\"Sparrow\")\n  val gumpFuture = hanks ? ReportCount(\"Gump\")\n\n  val wonkaCount = Await.result(wonkaFuture, timeout.duration)\n  val sparrowCount = Await.result(sparrowFuture, timeout.duration)\n  val gumpCount = Await.result(gumpFuture, timeout.duration)\n\n  println(s\"Depp played Wonka $wonkaCount time(s)\")\n  println(s\"Depp played Sparrow $sparrowCount time(s)\")\n  println(s\"Hanks played Gump $gumpCount time(s)\")\n\n  val terminateFuture = system.terminate()\n  Await.ready(terminateFuture, Duration.Inf)\n}\n运行结果\nSent roles to play\nPlaying Wonka\nPlaying Gump\nPlaying Wonka\nPlaying Sparrow\nDepp played Wonka 2 time(s)\nDepp played Sparrow 1 time(s)\nHanks played Gump 1 time(s)","title":"代码清单13-7"},{"location":"/chapter-13/index.html#代码清单13-8","text":"import akka.actor._\nimport java.io._\n\nclass FileExplorer extends Actor {\n  def receive: PartialFunction[Any, Unit] = {\n    case dirName: String ⇒\n      val file = new File(dirName)\n      val children = file.listFiles()\n      var filesCount = 0\n\n      if (children != null) {\n        children.filter { _.isDirectory }\n          .foreach { sender ! _.getAbsolutePath }\n        filesCount = children.count { !_.isDirectory }\n      }\n\n      sender ! filesCount\n  }\n}","title":"代码清单13-8"},{"location":"/chapter-13/index.html#代码清单13-9","text":"import akka.actor._\nimport akka.routing._\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration.Duration\n\nclass FilesCounter extends Actor {\n  val start: Long = System.nanoTime\n  var filesCount = 0L\n  var pending = 0\n\n  val fileExplorers: ActorRef =\n    context.actorOf(RoundRobinPool(100).props(Props[FileExplorer]))\n\n  def receive: PartialFunction[Any, Unit] = {\n    case dirName: String ⇒\n      pending = pending + 1\n      fileExplorers ! dirName\n\n    case count: Int ⇒\n      filesCount = filesCount + count\n      pending = pending - 1\n\n      if (pending == 0) {\n        val end = System.nanoTime\n        println(s\"Files count: $filesCount\")\n        println(s\"Time taken: ${(end - start) / 1.0e9} seconds\")\n        val terminateFuture = context.system.terminate()\n        Await.ready(terminateFuture, Duration.Inf)\n      }\n  }\n}","title":"代码清单13-9"},{"location":"/chapter-13/index.html#代码清单13-10","text":"import akka.actor._\n\nobject CountFiles extends App {\n  val system = ActorSystem(\"sample\")\n\n  val filesCounter = system.actorOf(Props[FilesCounter])\n\n  filesCounter ! args(0)\n}\n运行结果\nFiles count: 479758\nTime taken: 5.609851764 seconds","title":"代码清单13-10"},{"location":"/chapter-14/index.html","text":"","title":"第14章——和Java进行互操作 ·"},{"location":"/chapter-14/index.html#第14章-和java进行互操作","text":"","title":"第14章——和Java进行互操作"},{"location":"/chapter-14/index.html#代码清单14-1","text":"class Person(val firstName: String, val lastName: String) {\n  override def toString: String = firstName + \" \" + lastName\n}","title":"代码清单14-1"},{"location":"/chapter-14/index.html#代码清单14-2","text":"class Dog(val name: String) {\n  override def toString: String = name\n}","title":"代码清单14-2"},{"location":"/chapter-14/index.html#代码清单14-3","text":"val george = new Person(\"George\", \"Washington\")\n\nval georgesDogs = List(new Dog(\"Captain\"), new Dog(\"Clode\"),\n  new Dog(\"Forester\"), new Dog(\"Searcher\"))\n\nprintln(s\"$george had several dogs ${georgesDogs.mkString(\", \")}...\")\n运行结果\nGeorge Washington had several dogs Captain, Clode, Forester, Searcher...","title":"代码清单14-3"},{"location":"/chapter-14/index.html#代码清单14-4","text":"object UsePersonClass extends App {\n  val ben = new Person(\"Ben\", \"Franklin\")\n  println(s\"$ben was a great inventor.\")\n}\n运行结果\nBen Franklin was a great inventor.","title":"代码清单14-4"},{"location":"/chapter-14/index.html#代码清单14-5","text":"import java.util.Currency\n\nval currencies = Currency.getAvailableCurrencies\nprintln(s\"${currencies.size} currencies are available.\")\n运行结果\n220 currencies are available.","title":"代码清单14-5"},{"location":"/chapter-14/index.html#代码清单14-6","text":"//Java code\npackage chapter14.usingjava;\n\npublic enum InvestmentType {\n  BOND,  STOCK, REAL_ESTATE,  COMMODITIES,  COLLECTIBLES, MUTUAL_FUNDS\n}\n运行结果\nclass investments.Investment","title":"代码清单14-6"},{"location":"/chapter-14/index.html#代码清单14-7","text":"//Java code\npackage chapter14.usingjava;\n\npublic class Investment {                                        \n  private String investmentName;\n  private InvestmentType investmentType;\n             \n  public Investment(String name, InvestmentType type) {\n    investmentName = name;\n    investmentType = type;\n  } \n  public int yield() { return 0; }\n}","title":"代码清单14-7"},{"location":"/chapter-14/index.html#代码清单14-8","text":"import chapter14.usingjava.{ Investment, InvestmentType }\n\nobject UseInvestment extends App {\n  val investment = new Investment(\"XYZ Corporation\", InvestmentType.STOCK)\n  println(investment.getClass)\n}","title":"代码清单14-8"},{"location":"/chapter-14/index.html#代码清单14-9","text":"val theYield1 = investment.yield   //ERROR\nval theYield2 = investment.yield() //ERROR","title":"代码清单14-9"},{"location":"/chapter-14/index.html#代码清单14-10","text":"val theYield1 = investment.`yield`\nval theYield2 = investment.`yield`()","title":"代码清单14-10"},{"location":"/chapter-14/index.html#代码清单14-11","text":"package chapter14\n\nclass Car(val year: Int) {\n  private[this] var miles: Int = 0\n\n  def drive(distance: Int): Unit = { miles += distance }\n\n  override def toString: String = s\"year: $year miles: $miles\"\n}","title":"代码清单14-11"},{"location":"/chapter-14/index.html#代码清单14-12","text":"//Java code\npackage chapter14;\n\npublic class UseCar {\n  public static void main(String[] args) {\n    Car car = new Car(2009);\n    \n    System.out.println(car);\n    car.drive(10);\n    System.out.println(car);\n  }\n}","title":"代码清单14-12"},{"location":"/chapter-14/index.html#代码清单14-13","text":"trait Writable {\n  def write(message: String): Unit\n}","title":"代码清单14-13"},{"location":"/chapter-14/index.html#代码清单14-14","text":"//Java code\npublic class AWritableJavaClass implements Writable {\n  public void write(String message) {\n    //...code...\n  }\n}","title":"代码清单14-14"},{"location":"/chapter-14/index.html#代码清单14-15","text":"trait Printable {\n  def print(): Unit = {\n    println(\"running printable...\")\n  }\n}\n运行结果\nCompiled from \"Printable.scala\"\npublic abstract class Printable$class {\n  public static void print(Printable);\n  public static void $init$(Printable);\n}\nCompiled from \"Printable.scala\"\npublic abstract class Printable$class {\n  public static void print(Printable);\n  public static void $init$(Printable);\n}","title":"代码清单14-15"},{"location":"/chapter-14/index.html#代码清单14-16","text":"public class APrintable implements Printable {\n  public void print() {\n    System.out.println(\"We can reuse the trait here if we like...\");\n    //Printable$class.print(this); // for 2.11.x\n    Printable.super.print(); // for 2.12.x\n  }\n  \n  public static void use(Printable printable) {\n    printable.print();\n  }\n  \n  public static void main(String[] args) {\n    APrintable aPrintable = new APrintable();\n    use(aPrintable);\n  }\n}\n运行结果\nWe can reuse the trait here if we like...\nrunning printable...","title":"代码清单14-16"},{"location":"/chapter-14/index.html#代码清单14-17","text":"package chapter14\n\nobject Single {\n  def greet(): Unit = { println(\"Hello from Single\") }\n}","title":"代码清单14-17"},{"location":"/chapter-14/index.html#代码清单14-18","text":"//Java code\npublic class SingleUser {\n  public static void main(String[] args) {\n    Single.greet();\n  }\n}","title":"代码清单14-18"},{"location":"/chapter-14/index.html#代码清单14-19","text":"class Buddy {\n  def greet(): Unit = { println(\"Hello from Buddy class\") }\n}\n\nobject Buddy {\n  def greet(): Unit = { println(\"Hello from Buddy object\") }\n}","title":"代码清单14-19"},{"location":"/chapter-14/index.html#代码清单14-20","text":"//Java code\npublic class BuddyUser {\n  public static void main(String[] args) {\n    new Buddy().greet();\n    Buddy$.MODULE$.greet(); \n  }\n}\n运行结果\nHello from Buddy class\nHello from Buddy object","title":"代码清单14-20"},{"location":"/chapter-14/index.html#代码清单14-21","text":"abstract class BirdWithProblem {\n  def fly(): Unit\n  //...\n}","title":"代码清单14-21"},{"location":"/chapter-14/index.html#代码清单14-22","text":"class Ostrich extends Bird {\n  override def fly(): Unit = {\n    throw new NoFlyException\n  }\n  //...\n}","title":"代码清单14-22"},{"location":"/chapter-14/index.html#代码清单14-23","text":"class NoFlyException extends Exception {}","title":"代码清单14-23"},{"location":"/chapter-14/index.html#代码清单14-24","text":"//Java code\nclass Penguin extends Bird {      \n  public void fly() throws NoFlyException {\n    throw new NoFlyException();\n  }\n  //...\n}\n运行结果\nPenguin.java:3: error: fly() in Penguin cannot override fly() in Bird\n  public void fly() throws NoFlyException {\n              ^\n  overridden method does not throw NoFlyException\n1 error","title":"代码清单14-24"},{"location":"/chapter-14/index.html#代码清单14-25","text":"abstract class Bird {\n  @throws(classOf[NoFlyException]) def fly(): Unit\n  //...\n}","title":"代码清单14-25"},{"location":"/chapter-15/index.html","text":"","title":"第15章——使用Scala创建应用程序 ·"},{"location":"/chapter-15/index.html#第15章-使用scala创建应用程序","text":"","title":"第15章——使用Scala创建应用程序"},{"location":"/chapter-15/index.html#代码清单15-1","text":"import scala.io._\n\nprint(\"Please enter a ticker symbol:\")\nval symbol = StdIn.readLine()\nprintln(s\"OK, got it, you own $symbol\")\n运行结果\nPlease enter a ticker symbol:OK, got it, you own AAPL","title":"代码清单15-1"},{"location":"/chapter-15/index.html#代码清单15-2","text":"import java.io._\n\nval writer = new PrintWriter(new File(\"symbols.txt\"))\nwriter write \"AAPL\"\nwriter.close()\nprintln(scala.io.Source.fromFile(\"symbols.txt\").mkString)","title":"代码清单15-2"},{"location":"/chapter-15/index.html#代码清单15-3","text":"import scala.io._\n\nprint(\"Please enter a ticker symbol:\")\nval symbol = StdIn.readLine()\nprintln(s\"OK, got it, you own $symbol\")\n运行结果\n*** The content of the file you read is:\nimport scala.io.Source\n\nprintln(\"*** The content of the file you read is:\")\nSource.fromFile(\"ReadingFile.scala\").foreach { print }","title":"代码清单15-3"},{"location":"/chapter-15/index.html#代码清单15-4","text":"import scala.io.Source\nimport java.net.URL\n\nval source = Source.fromURL(new URL(\"http://localhost\"))\n\nprintln(s\"What's Source?: $source\")\nprintln(s\"Raw String: ${source.mkString}\")\n运行结果\nWhat's Source?: non-empty iterator\nRaw String: <html><body><h1>It works!</h1></body></html>","title":"代码清单15-4"},{"location":"/chapter-15/index.html#代码清单15-5","text":"val xmlFragment =\n  <symbols>\n    <symbol ticker=\"AAPL\"><units>200</units></symbol>\n    <symbol ticker=\"IBM\"><units>215</units></symbol>\n  </symbols>\n\nprintln(xmlFragment)\nprintln(xmlFragment.getClass)\n运行结果\n<symbols>\n  <symbol ticker=\"AAPL\"><units>200</units></symbol>\n  <symbol ticker=\"IBM\"><units>215</units></symbol>\n</symbols>\nclass scala.xml.Elem","title":"代码清单15-5"},{"location":"/chapter-15/index.html#代码清单15-6","text":"var symbolNodes = xmlFragment \\ \"symbol\"\nsymbolNodes foreach println\nprintln(symbolNodes.getClass)\n运行结果\n<symbol ticker=\"AAPL\"><units>200</units></symbol>\n<symbol ticker=\"IBM\"><units>215</units></symbol>\nclass scala.xml.NodeSeq$$anon$1","title":"代码清单15-6"},{"location":"/chapter-15/index.html#代码清单15-7","text":"var unitsNodes = xmlFragment \\\\ \"units\"\nunitsNodes foreach println\nprintln(unitsNodes.getClass)\nprintln(unitsNodes.head.text)\n运行结果\n<units>200</units>\n<units>215</units>\nclass scala.xml.NodeSeq$$anon$1\n200","title":"代码清单15-7"},{"location":"/chapter-15/index.html#代码清单15-8","text":"unitsNodes.head match {\n  case <units>{ numberOfUnits @ _* }</units> ⇒ println(s\"Units: $numberOfUnits\")\n}\n运行结果\nUnits: 200","title":"代码清单15-8"},{"location":"/chapter-15/index.html#代码清单15-9","text":"println(\"Ticker\\tUnits\")\nxmlFragment match {\n  case <symbols>{ symbolNodes @ _* }</symbols> ⇒\n    for (symbolNode @ <symbol>{ _* }</symbol> ← symbolNodes) {\n      println(\"%-7s %s\".format(\n        symbolNode \\ \"@ticker\", (symbolNode \\ \"units\").text))\n    }\n}\n运行结果\nTicker\tUnits\nAAPL    200\nIBM     215","title":"代码清单15-9"},{"location":"/chapter-15/index.html#代码清单15-10","text":"<symbols>\n  <symbol ticker=\"AAPL\"><units>200</units></symbol>\n  <symbol ticker=\"ADBE\"><units>125</units></symbol>\n  <symbol ticker=\"ALU\"><units>150</units></symbol>\n  <symbol ticker=\"AMD\"><units>150</units></symbol>\n  <symbol ticker=\"CSCO\"><units>250</units></symbol>\n  <symbol ticker=\"HPQ\"><units>225</units></symbol>\n  <symbol ticker=\"IBM\"><units>215</units></symbol>\n  <symbol ticker=\"INTC\"><units>160</units></symbol>\n  <symbol ticker=\"MSFT\"><units>190</units></symbol>\n  <symbol ticker=\"NSM\"><units>200</units></symbol>\n  <symbol ticker=\"ORCL\"><units>200</units></symbol>\n  <symbol ticker=\"SYMC\"><units>230</units></symbol>\n  <symbol ticker=\"TXN\"><units>190</units></symbol>\n  <symbol ticker=\"VRSN\"><units>200</units></symbol>\n  <symbol ticker=\"XRX\"><units>240</units></symbol>\n</symbols>","title":"代码清单15-10"},{"location":"/chapter-15/index.html#代码清单15-11","text":"import scala.xml._\n\nval stocksAndUnits = XML load \"stocks.xml\"\nprintln(stocksAndUnits.getClass)\nprintln(s\"File has ${(stocksAndUnits \\\\ \"symbol\").size} symbol elements\")\n运行结果\nclass scala.xml.Elem\nFile has 15 symbol elements","title":"代码清单15-11"},{"location":"/chapter-15/index.html#代码清单15-12","text":"val stocksAndUnitsMap =\n  (Map[String, Int]() /: (stocksAndUnits \\ \"symbol\")) { (map, symbolNode) ⇒\n    val ticker = (symbolNode \\ \"@ticker\").toString\n    val units = (symbolNode \\ \"units\").text.toInt\n    map + (ticker -> units) //return new map, with one additional entry\n  }\n\nprintln(s\"Number of symbol elements found is ${stocksAndUnitsMap.size}\")\n运行结果\nNumber of symbol elements found is 15","title":"代码清单15-12"},{"location":"/chapter-15/index.html#代码清单15-13","text":"val updatedStocksAndUnitsXML =\n  <symbols>\n    { stocksAndUnitsMap map updateUnitsAndCreateXML }\n  </symbols>\n\ndef updateUnitsAndCreateXML(element: (String, Int)) = {\n  val (ticker, units) = element\n  <symbol ticker={ ticker }>\n    <units>{ units + 1 }</units>\n  </symbol>\n}\n\nXML save (\"stocks2.xml\", updatedStocksAndUnitsXML)\n\nval elementsCount = (XML.load(\"stocks2.xml\") \\\\ \"symbol\").size\nprintln(s\"Saved file has $elementsCount symbol elements\")\n运行结果\nSaved file has 15 symbol elements\n运行结果\nDate,Open,High,Low,Close,Volume,Adj Close\n2015-03-20,561.65,561.72,559.05,560.36,2585800,560.36\n2015-03-19,559.39,560.80,556.15,557.99,1191100,557.99\n2015-03-18,552.50,559.78,547.00,559.50,2124400,559.50\n...","title":"代码清单15-13"},{"location":"/chapter-15/index.html#代码清单15-14","text":"import java.util.Calendar\n\nobject StockPriceFinder {\n  def getLatestClosingPrice(symbol: String): Double = {\n    val url = \"http://ichart.finance.yahoo.com/table.csv?s=\" +\n      symbol + \"&a=00&b=01&c=\" + Calendar.getInstance().get(Calendar.YEAR)\n    val data = scala.io.Source.fromURL(url).mkString\n    val mostRecentData = data.split(\"\\n\")(1)\n    val closingPrice = mostRecentData.split(\",\")(4).toDouble\n    closingPrice\n  }\n  def getTickersAndUnits: Map[String, Int] = {\n    val stocksAndUnitsXML = scala.xml.XML.load(\"stocks.xml\")\n    (Map[String, Int]() /: (stocksAndUnitsXML \\ \"symbol\")) {\n      (map, symbolNode) ⇒\n        val ticker = (symbolNode \\ \"@ticker\").toString\n        val units = (symbolNode \\ \"units\").text.toInt\n        map + (ticker -> units)\n    }\n  }\n}","title":"代码清单15-14"},{"location":"/chapter-15/index.html#代码清单15-15","text":"object FindTotalWorthSequential extends App {\n  val symbolsAndUnits = StockPriceFinder.getTickersAndUnits\n\n  println(\"Ticker  Units  Closing Price($) Total Value($)\")\n\n  val startTime = System.nanoTime()\n  val valuesAndWorth = symbolsAndUnits.keys.map { symbol ⇒\n    val units = symbolsAndUnits(symbol)\n    val latestClosingPrice = StockPriceFinder getLatestClosingPrice symbol\n    val value = units * latestClosingPrice\n\n    (symbol, units, latestClosingPrice, value)\n  }\n\n  val netWorth = (0.0 /: valuesAndWorth) { (worth, valueAndWorth) ⇒\n    val (_, _, _, value) = valueAndWorth\n    worth + value\n  }\n  val endTime = System.nanoTime()\n\n  valuesAndWorth.toList.sortBy { _._1 }.foreach { valueAndWorth ⇒\n    val (symbol, units, latestClosingPrice, value) = valueAndWorth\n    println(f\"$symbol%7s  $units%5d  $latestClosingPrice%15.2f  $value%.2f\")\n  }\n\n  println(f\"The total value of your investments is $$$netWorth%.2f\")\n  println(f\"Took ${(endTime - startTime) / 1000000000.0}%.2f  seconds\")\n}\n运行结果\nTicker  Units  Closing Price($) Total Value($)\n   AAPL    200           125.90  25180.00\n   ADBE    125            77.36  9670.00\n    ALU    150             3.84  576.00\n    AMD    150             2.80  420.00\n   CSCO    250            28.44  7110.00\n    HPQ    225            33.28  7488.00\n    IBM    215           162.88  35019.20\n   INTC    160            31.31  5009.60\n   MSFT    190            42.88  8147.20\n    NSM    200            29.94  5988.00\n   ORCL    200            44.41  8882.00\n   SYMC    230            24.38  5607.40\n    TXN    190            59.28  11263.20\n   VRSN    200            64.75  12950.00\n    XRX    240            13.18  3163.20\nThe total value of your investments is $146473.80\nTook 11.13  seconds","title":"代码清单15-15"},{"location":"/chapter-15/index.html#代码清单15-16","text":"val valuesAndWorth = symbolsAndUnits.keys.par.map { symbol ⇒\n运行结果\nTicker  Units  Closing Price($) Total Value($)\n   AAPL    200           125.90  25180.00\n   ADBE    125            77.36  9670.00\n    ALU    150             3.84  576.00\n    AMD    150             2.80  420.00\n   CSCO    250            28.44  7110.00\n    HPQ    225            33.28  7488.00\n    IBM    215           162.88  35019.20\n   INTC    160            31.31  5009.60\n   MSFT    190            42.88  8147.20\n    NSM    200            29.94  5988.00\n   ORCL    200            44.41  8882.00\n   SYMC    230            24.38  5607.40\n    TXN    190            59.28  11263.20\n   VRSN    200            64.75  12950.00\n    XRX    240            13.18  3163.20\nThe total value of your investments is $146473.80\nTook 1.98  seconds","title":"代码清单15-16"},{"location":"/chapter-16/index.html","text":"","title":"第16章——单元测试 ·"},{"location":"/chapter-16/index.html#第16章-单元测试","text":"","title":"第16章——单元测试"},{"location":"/chapter-16/index.html#代码清单16-1","text":"import java.util\n\nimport org.junit.Assert._\nimport org.junit.Test\n\nclass UsingJUnit {\n  @Test\n  def listAdd(): Unit = {\n    val list = new util.ArrayList[String]\n    list.add(\"Milk\")\n    list add \"Sugar\"\n    assertEquals(2, list.size)\n  }\n}\n运行结果\nJUnit version 4.12\n.\nTime: 0.003\n\nOK (1 test)","title":"代码清单16-1"},{"location":"/chapter-16/index.html#代码清单16-2","text":"import java.util\nimport org.scalatest._\n\nclass UsingScalaTest extends FlatSpec with Matchers {\n  trait EmptyArrayList {\n    val list = new util.ArrayList[String]\n  }\n\n  \"a list\" should \"be empty on create\" in new EmptyArrayList {\n    list.size should be(0)\n  }\n\n  \"a list\" should \"increase in size upon add\" in new EmptyArrayList {\n    list.add(\"Milk\")\n    list add \"Sugar\"\n\n    list.size should be(2)\n  }\n}\n运行结果\nRun starting. Expected test count is: 2\nUsingScalaTest:\na list\n- should be empty on create\na list\n- should increase in size upon add\nRun completed in 181 milliseconds.\nTotal number of tests run: 2\nSuites: completed 1, aborted 0\nTests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0\nAll tests passed.","title":"代码清单16-2"},{"location":"/chapter-16/index.html#代码清单16-3","text":"import org.scalatest.{ FlatSpec, Matchers }\n\nclass WordScorerTest extends FlatSpec with Matchers {\n\n  def withWordScorer(test: WordScorer ⇒ Unit): Unit = {\n    val wordScorer = new WordScorer()\n\n    test(wordScorer)\n  }\n\n  \"score\" should \"return 0 for an empty word\" in {\n    withWordScorer { wordScorer ⇒ wordScorer.score(\"\") should be(0) }\n  }\n\n  \"score\" should \"return 2 for word with two vowels\" in {\n    withWordScorer { _.score(\"ai\") should be(2) }\n  }\n\n  \"score\" should \"return 8 for word with four consonants\" in {\n    withWordScorer { _.score(\"myth\") should be(8) }\n  }\n\n  \"score\" should \"return 7 for word with a vowel and three consonants\" in {\n    withWordScorer { _.score(\"that\") should be(7) }\n  }\n}","title":"代码清单16-3"},{"location":"/chapter-16/index.html#代码清单16-4","text":"class WordScorer() {\n  private val VOWELS = List('a', 'e', 'i', 'o', 'u')\n\n  def score(word: String): Int = {\n    (0 /: word) { (total, letter) ⇒\n      total + (if (VOWELS.contains(letter)) 1 else 2)\n    }\n  }\n}\n运行结果\nRun starting. Expected test count is: 4\nWordScorerTest:\nscore\n- should return 0 for an empty word\nscore\n- should return 2 for word with two vowels\nscore\n- should return 8 for word with four consonants\nscore\n- should return 7 for word that with a vowel and three consonants\nRun completed in 181 milliseconds.\nTotal number of tests run: 4\nSuites: completed 1, aborted 0\nTests: succeeded 4, failed 0, canceled 0, ignored 0, pending 0\nAll tests passed.","title":"代码清单16-4"},{"location":"/chapter-16/index.html#代码清单16-5","text":"trait SpellChecker {\n  def isCorrect(word: String): Boolean\n}","title":"代码清单16-5"},{"location":"/chapter-16/index.html#代码清单16-6","text":"import org.scalatest.{ FlatSpec, Matchers }\nimport org.mockito.Mockito._\nimport org.mockito.ArgumentMatchers.anyString\n\nclass WordScorerTest extends FlatSpec with Matchers {\n\n  def withWordScorer(test: WordScorer ⇒ Unit): Boolean = {\n    val spellChecker = mock(classOf[SpellChecker])\n    when(spellChecker.isCorrect(anyString)).thenReturn(true)\n    val wordScorer = new WordScorer(spellChecker)\n\n    test(wordScorer)\n\n    verify(spellChecker, times(1)).isCorrect(anyString())\n  }\n\n  //No change to the tests, same as in the previous version\n  \"score\" should \"return 0 for an empty word\" in {\n    withWordScorer { wordScorer ⇒ wordScorer.score(\"\") should be(0) }\n  }\n\n  \"score\" should \"return 2 for word with two vowels\" in {\n    withWordScorer { _.score(\"ai\") should be(2) }\n  }\n\n  \"score\" should \"return 8 for word with four consonants\" in {\n    withWordScorer { _.score(\"myth\") should be(8) }\n  }\n\n  \"score\" should \"return 7 for word that with a vowel and three consonants\" in {\n    withWordScorer { _.score(\"that\") should be(7) }\n  }\n\n}","title":"代码清单16-6"},{"location":"/chapter-16/index.html#代码清单16-7","text":"class WordScorer(val spellChecker: SpellChecker) {\n  private val VOWELS = List('a', 'e', 'i', 'o', 'u')\n\n  def score(word: String): Int = {\n    spellChecker.isCorrect(word)\n    (0 /: word) { (total, letter) ⇒\n      total + (if (VOWELS.contains(letter)) 1 else 2)\n    }\n  }\n}\n运行结果\nRun starting. Expected test count is: 4\nWordScorerTest:\nscore\n- should return 0 for an empty word\nscore\n- should return 2 for word with two vowels\nscore\n- should return 8 for word with four consonants\nscore\n- should return 7 for word that with a vowel and three consonants\nRun completed in 316 milliseconds.\nTotal number of tests run: 4\nSuites: completed 1, aborted 0\nTests: succeeded 4, failed 0, canceled 0, ignored 0, pending 0\nAll tests passed.","title":"代码清单16-7"},{"location":"/chapter-16/index.html#代码清单16-7","text":"\"score\" should \"return 0 for word with incorrect spelling\" in {\n  val spellChecker = mock(classOf[SpellChecker])\n  when(spellChecker.isCorrect(anyString)).thenReturn(false)\n  val wordScorer = new WordScorer(spellChecker)\n\n  wordScorer.score(\"aoe\") should be(0)\n  verify(spellChecker, times(1)).isCorrect(anyString())\n}","title":"代码清单16-7"},{"location":"/chapter-16/index.html#代码清单16-8","text":"def score(word: String): Int = {\n  if (spellChecker.isCorrect(word))\n    (0 /: word) { (total, letter) ⇒\n      total + (if (VOWELS.contains(letter)) 1 else 2)\n    }\n  else\n    0\n}\n运行结果\nRun starting. Expected test count is: 5\nWordScorerTest:\nscore\n- should return 0 for an empty word\nscore\n- should return 2 for word with two vowels\nscore\n- should return 8 for word with four consonants\nscore\n- should return 7 for word that with a vowel and three consonants\nscore\n- should return 0 for word with incorrect spelling\nRun completed in 208 milliseconds.\nTotal number of tests run: 5\nSuites: completed 1, aborted 0\nTests: succeeded 5, failed 0, canceled 0, ignored 0, pending 0\nAll tests passed.","title":"代码清单16-8"},{"location":"/appendix-01/index.html","text":"","title":"附录 1"},{"location":"/appendix-01/index.html#附录-1","text":"TODO","title":"附录 1"}]}