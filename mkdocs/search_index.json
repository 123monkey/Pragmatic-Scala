{"docs":[{"location":"appendix-01/index.html","text":"","title":"附录 1"},{"location":"appendix-01/index.html#附录-1","text":"TODO","title":"附录 1"},{"location":"appendix-02/index.html","text":"","title":"附录 2"},{"location":"appendix-02/index.html#附录-2","text":"TODO","title":"附录 2"},{"location":"index.html","text":"第1章——Exploring Scala 代码清单1-1（Introduction/TopStock.scala） 第7章——特质 代码清单7-1（UsingTraits/HumanWithListen.scala） 代码清单7-2（UsingTraits/Friend.scala） 代码清单7-3 代码清单7-4 代码清单7-5 代码清单7-6 代码清单7-7 代码清单7-8 代码清单7-9 代码清单7-10 代码清单7-11 代码清单7-12 代码清单7-13 代码清单7-14 代码清单7-15 代码清单7-16 代码清单7-17 第8章——集合 代码清单8-1（UsingCollections/UsingSet.scala） 第9章——模式匹配和正则表达式 代码清单9-1（PatternMatching/MatchLiterals.scala） 第10章——处理异常 代码清单10-1（ExceptionHandling/Tax.scala） 第11章——递归编程 代码清单11-1（ProgrammingRecursions/factorial.scala） 第12章——惰性求值和并行集合 代码清单12-1（Parallel/shortCircuit.scala） 第13章——使用Actor模型处理并发 代码清单13-1（ProgrammingActors/countFilesSequential.scala） 第14章——和Java进行互操作 代码清单14-1（Intermixing/Person.scala） 第15章——使用Scala创建应用程序 代码清单15-1（UsingScala/ConsoleInput.scala） 第16章——单元测试 代码清单16-1（UnitTesting/UsingJUnit.scala）","title":""},{"location":"chapter-01/index.html","text":"","title":"第1章——Exploring Scala ·"},{"location":"chapter-01/index.html#第1章-exploring-scala","text":"","title":"第1章——Exploring Scala"},{"location":"chapter-01/index.html#代码清单1-1-introduction-topstock-scala-","text":"val symbols = List(\"AMD\", \"AAPL\", \"AMZN\", \"IBM\", \"ORCL\", \"MSFT\") \nval year = 2014 \n\nval (topStock, topPrice) = \n  symbols.map { ticker => (ticker, getYearEndClosingPrice(ticker, year)) } \n         .maxBy { stockPrice => stockPrice._2 } \n\nprintf(s\"Top stock of $year is $topStock closing at price $$$topPrice\")","title":"代码清单1-1（Introduction/TopStock.scala）"},{"location":"chapter-07/index.html","text":"","title":"第7章——特质 ·"},{"location":"chapter-07/index.html#第7章-特质","text":"","title":"第7章——特质"},{"location":"chapter-07/index.html#代码清单7-1-usingtraits-humanwithlisten-scala-","text":"class Human(val name: String) {\n  def listen(): Unit = println(s\"Your friend $name is listening\")\n}\n\nclass Man(override val name: String) extends Human(name)\nclass Woman(override val name: String) extends Human(name)","title":"代码清单7-1（UsingTraits/HumanWithListen.scala）"},{"location":"chapter-07/index.html#代码清单7-2-usingtraits-friend-scala-","text":"trait Friend {    \n  val name: String\n  def listen() = println(s\"Your friend $name is listening\")\n}","title":"代码清单7-2（UsingTraits/Friend.scala）"},{"location":"chapter-07/index.html#代码清单7-3","text":"class Human(val name: String) extends Friend\n\nclass Woman(override val name: String) extends Human(name)\nclass Man(override val name: String) extends Human(name)","title":"代码清单7-3"},{"location":"chapter-07/index.html#代码清单7-4","text":"class Dog(val name: String) extends Animal with Friend {          \n  //optionally override method here.\n  override def listen(): Unit = println(s\"$name's listening quietly\")\n}","title":"代码清单7-4"},{"location":"chapter-07/index.html#代码清单7-5","text":"class Animal","title":"代码清单7-5"},{"location":"chapter-07/index.html#代码清单7-6","text":"object UseFriend extends App {\n  val john = new Man(\"John\")\n  val sara = new Woman(\"Sara\")\n  val comet = new Dog(\"Comet\")\n\n  john.listen()\n  sara.listen()\n  comet.listen()\n\n  val mansBestFriend : Friend = comet\n  mansBestFriend.listen()\n\n  def helpAsFriend(friend: Friend): Unit = friend.listen()\n\n  helpAsFriend(sara)\n  helpAsFriend(comet)  \n}","title":"代码清单7-6"},{"location":"chapter-07/index.html#代码清单7-7","text":"class Cat(val name: String) extends Animal","title":"代码清单7-7"},{"location":"chapter-07/index.html#代码清单7-8","text":"object UseCat extends App {\n  def useFriend(friend: Friend): Unit = friend.listen()\n\n  val alf = new Cat(\"Alf\")\n  val friend : Friend = alf // ERROR\n\n  useFriend(alf) // ERROR  \n}","title":"代码清单7-8"},{"location":"chapter-07/index.html#代码清单7-9","text":"def useFriend(friend: Friend): Unit = friend.listen()\n\nval angel = new Cat(\"Angel\") with Friend\nval friend : Friend = angel\nangel.listen()\n\nuseFriend(angel)","title":"代码清单7-9"},{"location":"chapter-07/index.html#代码清单7-10","text":"abstract class Check {\n  def check : String = \"Checked Application Details...\"\n}","title":"代码清单7-10"},{"location":"chapter-07/index.html#代码清单7-11","text":"trait CreditCheck extends Check {\n  override def check : String = s\"Checked Credit... ${super.check}\"\n}\n\ntrait EmploymentCheck extends Check {\n  override def check : String = s\"Checked Employment...${super.check}\"\n}\n\ntrait CriminalRecordCheck extends Check {\n  override def check : String = s\"Check Criminal Records...${super.check}\"\n}","title":"代码清单7-11"},{"location":"chapter-07/index.html#代码清单7-12","text":"val apartmentApplication = \n  new Check with CreditCheck with CriminalRecordCheck\n\nprintln(apartmentApplication.check)","title":"代码清单7-12"},{"location":"chapter-07/index.html#代码清单7-13","text":"val employmentApplication = \n  new Check with CriminalRecordCheck with EmploymentCheck\n\nprintln(employmentApplication.check)","title":"代码清单7-13"},{"location":"chapter-07/index.html#代码清单7-14","text":"abstract class Writer  {\n  def writeMessage(message: String):Unit\n}","title":"代码清单7-14"},{"location":"chapter-07/index.html#代码清单7-15","text":"trait UpperCaseWriter extends Writer {\n  abstract override def writeMessage(message: String): Unit =\n    super.writeMessage(message.toUpperCase)\n}\n\ntrait ProfanityFilteredWriter extends Writer {\n  abstract override def writeMessage(message: String): Unit =\n    super.writeMessage(message.replace(\"stupid\", \"s-----\"))\n}","title":"代码清单7-15"},{"location":"chapter-07/index.html#代码清单7-16","text":"class StringWriterDelegate extends Writer {\n  val writer = new java.io.StringWriter\n  \n  def writeMessage(message: String): Unit = writer.write(message)\n  override def toString : String = writer.toString\n}","title":"代码清单7-16"},{"location":"chapter-07/index.html#代码清单7-17","text":"val myWriterProfanityFirst = \n  new StringWriterDelegate with UpperCaseWriter with ProfanityFilteredWriter\n\nval myWriterProfanityLast = \n  new StringWriterDelegate with ProfanityFilteredWriter with UpperCaseWriter\n\nmyWriterProfanityFirst writeMessage \"There is no sin except stupidity\"\nmyWriterProfanityLast writeMessage \"There is no sin except stupidity\"\n\nprintln(myWriterProfanityFirst)\nprintln(myWriterProfanityLast)","title":"代码清单7-17"},{"location":"chapter-08/index.html","text":"","title":"第8章——集合 ·"},{"location":"chapter-08/index.html#第8章-集合","text":"","title":"第8章——集合"},{"location":"chapter-08/index.html#代码清单8-1-usingcollections-usingset-scala-","text":"val colors1 = Set(\"Blue\", \"Green\", \"Red\")\nprintln(s\"colors1: $colors1\")\n\nval colors2 = colors1 + \"Black\"\nprintln(s\"colors2: $colors2\")\nprintln(s\"colors1: $colors1\")","title":"代码清单8-1（UsingCollections/UsingSet.scala）"},{"location":"chapter-09/index.html","text":"","title":"第9章——模式匹配和正则表达式 ·"},{"location":"chapter-09/index.html#第9章-模式匹配和正则表达式","text":"","title":"第9章——模式匹配和正则表达式"},{"location":"chapter-09/index.html#代码清单9-1-patternmatching-matchliterals-scala-","text":"def activity(day: String) {\n  day match {\n    case \"Sunday\" => print(\"Eat, sleep, repeat... \")\n    case \"Saturday\" => print(\"Hang out with friends... \")\n    case \"Monday\" => print(\"...code for fun...\")\n    case \"Friday\" => print(\"...read a good book...\")\n  }\n}\nList(\"Monday\", \"Sunday\", \"Saturday\").foreach { activity }","title":"代码清单9-1（PatternMatching/MatchLiterals.scala）"},{"location":"chapter-10/index.html","text":"","title":"第10章——处理异常 ·"},{"location":"chapter-10/index.html#第10章-处理异常","text":"","title":"第10章——处理异常"},{"location":"chapter-10/index.html#代码清单10-1-exceptionhandling-tax-scala-","text":"object Tax {\n  def taxFor(amount: Double): Double = {\n    if (amount < 0) \n       throw new IllegalArgumentException(\"Amount must be greater than zero\")\n       \n    if (amount < 0.01) \n      throw new RuntimeException(\"Amount too small to be taxed\")\n    \n    if (amount > 1000000) throw new Exception(\"Amount too large...\")\n    \n    amount * 0.08\n  }\n}","title":"代码清单10-1（ExceptionHandling/Tax.scala）"},{"location":"chapter-11/index.html","text":"","title":"第11章——递归编程 ·"},{"location":"chapter-11/index.html#第11章-递归编程","text":"","title":"第11章——递归编程"},{"location":"chapter-11/index.html#代码清单11-1-programmingrecursions-factorial-scala-","text":"def factorial(number: Int) : BigInt = {\n  if(number == 0)\n    1\n  else\n    number * factorial(number - 1)  \n}","title":"代码清单11-1（ProgrammingRecursions/factorial.scala）"},{"location":"chapter-12/index.html","text":"","title":"第12章——惰性求值和并行集合 ·"},{"location":"chapter-12/index.html#第12章-惰性求值和并行集合","text":"","title":"第12章——惰性求值和并行集合"},{"location":"chapter-12/index.html#代码清单12-1-parallel-shortcircuit-scala-","text":"def expensiveComputation() = {\n  println(\"...assume slow operation...\")\n  false\n}\n\ndef evaluate(input: Int): Unit = {\n  println(s\"evaluate called with $input\")\n  if(input >= 10 && expensiveComputation())\n    println(\"doing work...\")\n  else\n    println(\"skipping\")\n}\n\nevaluate(0)\nevaluate(100)","title":"代码清单12-1（Parallel/shortCircuit.scala）"},{"location":"chapter-13/index.html","text":"","title":"第13章——使用Actor模型处理并发 ·"},{"location":"chapter-13/index.html#第13章-使用actor模型处理并发","text":"","title":"第13章——使用Actor模型处理并发"},{"location":"chapter-13/index.html#代码清单13-1-programmingactors-countfilessequential-scala-","text":"import java.io.File\n\ndef getChildren(file: File) = {\n  val children = file.listFiles()\n  if(children != null) children.toList else List()\n}\n\nval start = System.nanoTime\nval exploreFrom = new File(args(0))\n\nvar count = 0L\nvar filesToVisit = List(exploreFrom)\n\nwhile(filesToVisit.size > 0) {\n  val head = filesToVisit.head\n  filesToVisit = filesToVisit.tail\n  \n  val children = getChildren(head)\n  count = count + children.count { !_.isDirectory }\n  filesToVisit = filesToVisit ::: children.filter { _.isDirectory }\n}\n\nval end = System.nanoTime\nprintln(s\"Number of files found: $count\")\nprintln(s\"Time taken: ${(end - start)/1.0e9} seconds\")","title":"代码清单13-1（ProgrammingActors/countFilesSequential.scala）"},{"location":"chapter-14/index.html","text":"","title":"第14章——和Java进行互操作 ·"},{"location":"chapter-14/index.html#第14章-和java进行互操作","text":"","title":"第14章——和Java进行互操作"},{"location":"chapter-14/index.html#代码清单14-1-intermixing-person-scala-","text":"class Person(val firstName: String, val lastName: String) {\n  override def toString : String = firstName + \" \" + lastName\n}","title":"代码清单14-1（Intermixing/Person.scala）"},{"location":"chapter-15/index.html","text":"","title":"第15章——使用Scala创建应用程序 ·"},{"location":"chapter-15/index.html#第15章-使用scala创建应用程序","text":"","title":"第15章——使用Scala创建应用程序"},{"location":"chapter-15/index.html#代码清单15-1-usingscala-consoleinput-scala-","text":"import scala.io._\n\nprint(\"Please enter a ticker symbol:\")\nval symbol = StdIn.readLine()\nprintln(s\"OK, got it, you own $symbol\")","title":"代码清单15-1（UsingScala/ConsoleInput.scala）"},{"location":"chapter-16/index.html","text":"","title":"第16章——单元测试 ·"},{"location":"chapter-16/index.html#第16章-单元测试","text":"","title":"第16章——单元测试"},{"location":"chapter-16/index.html#代码清单16-1-unittesting-usingjunit-scala-","text":"import java.util\nimport java.util.ArrayList\n\nimport org.junit.Test\nimport org.junit.Assert._\n\nclass UsingJUnit {\n  @Test \n  def listAdd() {\n    val list = new util.ArrayList[String]\n    list.add(\"Milk\")\n    list add \"Sugar\" \n    assertEquals(2, list.size)\n  }\n}","title":"代码清单16-1（UnitTesting/UsingJUnit.scala）"}]}