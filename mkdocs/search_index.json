{"docs":[{"location":"appendix-01/index.html","text":"","title":"附录 1"},{"location":"appendix-01/index.html#附录-1","text":"TODO","title":"附录 1"},{"location":"index.html","text":"目录 第1章——Exploring Scala 第7章——特质 第8章——集合 第9章——模式匹配和正则表达式 第10章——处理异常 第11章——递归编程 第12章——惰性求值和并行集合 第13章——使用Actor模型处理并发 第14章——和Java进行互操作 第15章——使用Scala创建应用程序 第16章——单元测试\n《Scala 实用指南》\n一本写给Java开发者的Scala快速入门书。","title":""},{"location":"contents.html","text":"","title":"目录 ·"},{"location":"contents.html#目录","text":"","title":"目录"},{"location":"chapter-01/index.html","text":"","title":"第1章——Exploring Scala ·"},{"location":"chapter-01/index.html#第1章-exploring-scala","text":"","title":"第1章——Exploring Scala"},{"location":"chapter-01/index.html#代码清单1-1","text":"val symbols = List(\"AMD\", \"AAPL\", \"AMZN\", \"IBM\", \"ORCL\", \"MSFT\")\nval year = 2014\n\nval (topStock, topPrice) =\n  symbols.map { ticker ⇒ (ticker, getYearEndClosingPrice(ticker, year)) }\n    .maxBy { stockPrice ⇒ stockPrice._2 }\n\nprintf(s\"Top stock of $year is $topStock closing at price $$$topPrice\")","title":"代码清单1-1"},{"location":"chapter-01/index.html#代码清单1-2","text":"def getYearEndClosingPrice(symbol: String, year: Int) = {\n  val url = s\"http://ichart.finance.yahoo.com/table.csv?s=\" +\n    s\"$symbol&a=11&b=01&c=$year&d=11&e=31&f=$year&g=m\"\n\n  val data = io.Source.fromURL(url).mkString\n  val price = data.split(\"\\n\")(1).split(\",\")(4).toDouble\n  price\n}","title":"代码清单1-2"},{"location":"chapter-07/index.html","text":"","title":"第7章——特质 ·"},{"location":"chapter-07/index.html#第7章-特质","text":"","title":"第7章——特质"},{"location":"chapter-07/index.html#代码清单7-1","text":"class Human(val name: String) {\n  def listen(): Unit = println(s\"Your friend $name is listening\")\n}\n\nclass Man(override val name: String) extends Human(name)\nclass Woman(override val name: String) extends Human(name)","title":"代码清单7-1"},{"location":"chapter-07/index.html#代码清单7-2","text":"trait Friend {\n  val name: String\n  def listen(): Unit = println(s\"Your friend $name is listening\")\n}","title":"代码清单7-2"},{"location":"chapter-07/index.html#代码清单7-3","text":"class Human(val name: String) extends Friend\n\nclass Woman(override val name: String) extends Human(name)\nclass Man(override val name: String) extends Human(name)","title":"代码清单7-3"},{"location":"chapter-07/index.html#代码清单7-4","text":"class Dog(val name: String) extends Animal with Friend {\n  //optionally override method here.\n  override def listen(): Unit = println(s\"$name's listening quietly\")\n}","title":"代码清单7-4"},{"location":"chapter-07/index.html#代码清单7-5","text":"class Animal","title":"代码清单7-5"},{"location":"chapter-07/index.html#代码清单7-6","text":"object UseFriend extends App {\n  val john = new Man(\"John\")\n  val sara = new Woman(\"Sara\")\n  val comet = new Dog(\"Comet\")\n\n  john.listen()\n  sara.listen()\n  comet.listen()\n\n  val mansBestFriend: Friend = comet\n  mansBestFriend.listen()\n\n  def helpAsFriend(friend: Friend): Unit = friend.listen()\n\n  helpAsFriend(sara)\n  helpAsFriend(comet)\n}","title":"代码清单7-6"},{"location":"chapter-07/index.html#代码清单7-7","text":"class Cat(val name: String) extends Animal","title":"代码清单7-7"},{"location":"chapter-07/index.html#代码清单7-8","text":"object UseCat extends App {\n  def useFriend(friend: Friend): Unit = friend.listen()\n\n  val alf = new Cat(\"Alf\")\n  val friend: Friend = alf // ERROR\n\n  useFriend(alf) // ERROR\n}","title":"代码清单7-8"},{"location":"chapter-07/index.html#代码清单7-9","text":"def useFriend(friend: Friend): Unit = friend.listen()\n\nval angel = new Cat(\"Angel\") with Friend\nval friend: Friend = angel\nangel.listen()\n\nuseFriend(angel)","title":"代码清单7-9"},{"location":"chapter-07/index.html#代码清单7-10","text":"abstract class Check {\n  def check: String = \"Checked Application Details...\"\n}","title":"代码清单7-10"},{"location":"chapter-07/index.html#代码清单7-11","text":"trait CreditCheck extends Check {\n  override def check: String = s\"Checked Credit... ${super.check}\"\n}\n\ntrait EmploymentCheck extends Check {\n  override def check: String = s\"Checked Employment...${super.check}\"\n}\n\ntrait CriminalRecordCheck extends Check {\n  override def check: String = s\"Check Criminal Records...${super.check}\"\n}","title":"代码清单7-11"},{"location":"chapter-07/index.html#代码清单7-12","text":"val apartmentApplication =\n  new Check with CreditCheck with CriminalRecordCheck\n\nprintln(apartmentApplication.check)","title":"代码清单7-12"},{"location":"chapter-07/index.html#代码清单7-13","text":"val employmentApplication =\n  new Check with CriminalRecordCheck with EmploymentCheck\n\nprintln(employmentApplication.check)","title":"代码清单7-13"},{"location":"chapter-07/index.html#代码清单7-14","text":"abstract class Writer {\n  def writeMessage(message: String): Unit\n}","title":"代码清单7-14"},{"location":"chapter-07/index.html#代码清单7-15","text":"trait UpperCaseWriter extends Writer {\n  abstract override def writeMessage(message: String): Unit =\n    super.writeMessage(message.toUpperCase)\n}\n\ntrait ProfanityFilteredWriter extends Writer {\n  abstract override def writeMessage(message: String): Unit =\n    super.writeMessage(message.replace(\"stupid\", \"s-----\"))\n}","title":"代码清单7-15"},{"location":"chapter-07/index.html#代码清单7-16","text":"class StringWriterDelegate extends Writer {\n  val writer = new java.io.StringWriter\n\n  def writeMessage(message: String): Unit = writer.write(message)\n  override def toString: String = writer.toString\n}","title":"代码清单7-16"},{"location":"chapter-07/index.html#代码清单7-17","text":"val myWriterProfanityFirst =\n  new StringWriterDelegate with UpperCaseWriter with ProfanityFilteredWriter\n\nval myWriterProfanityLast =\n  new StringWriterDelegate with ProfanityFilteredWriter with UpperCaseWriter\n\nmyWriterProfanityFirst writeMessage \"There is no sin except stupidity\"\nmyWriterProfanityLast writeMessage \"There is no sin except stupidity\"\n\nprintln(myWriterProfanityFirst)\nprintln(myWriterProfanityLast)","title":"代码清单7-17"},{"location":"chapter-08/index.html","text":"","title":"第8章——集合 ·"},{"location":"chapter-08/index.html#第8章-集合","text":"","title":"第8章——集合"},{"location":"chapter-08/index.html#代码清单8-1","text":"val colors1 = Set(\"Blue\", \"Green\", \"Red\")\nprintln(s\"colors1: $colors1\")\n\nval colors2 = colors1 + \"Black\"\nprintln(s\"colors2: $colors2\")\nprintln(s\"colors1: $colors1\")\n运行结果\ncolors1: Set(Blue, Green, Red)\ncolors2: Set(Blue, Green, Red, Black)\ncolors1: Set(Blue, Green, Red)","title":"代码清单8-1"},{"location":"chapter-08/index.html#在repl中执行","text":"scala>  val colors = Set(\"Blue\", \"Green\", \"Red\")\ncolors: scala.collection.immutable.Set[String] = Set(Blue, Green, Red)\n\nscala> colors.getClass\nres0: Class[_ <: scala.collection.immutable.Set[String]] = class \nscala.collection.immutable.Set$Set3\n\nscala> :quit","title":"在REPL中执行"},{"location":"chapter-08/index.html#代码清单8-2","text":"val feeds1 = Set(\"blog.toolshed.com\", \"pragdave.me\", \"blog.agiledeveloper.com\")\nval feeds2 = Set(\"blog.toolshed.com\", \"martinfowler.com/bliki\")","title":"代码清单8-2"},{"location":"chapter-08/index.html#代码清单8-3","text":"val blogFeeds = feeds1 filter (_ contains \"blog\")\nprintln(s\"blog feeds: ${blogFeeds.mkString(\", \")}\")\n运行结果\nblog feeds: blog.toolshed.com, blog.agiledeveloper.com","title":"代码清单8-3"},{"location":"chapter-08/index.html#代码清单8-4","text":"val mergedFeeds = feeds1 ++ feeds2\nprintln(s\"# of merged feeds: ${mergedFeeds.size}\")\n运行结果\n# of merged feeds: 4","title":"代码清单8-4"},{"location":"chapter-08/index.html#代码清单8-5","text":"val commonFeeds = feeds1 & feeds2\nprintln(s\"common feeds: ${commonFeeds.mkString(\", \")}\")\n运行结果\ncommon feeds: blog.toolshed.com","title":"代码清单8-5"},{"location":"chapter-08/index.html#代码清单8-6","text":"val urls = feeds1 map (\"http://\" + _)\nprintln(s\"One url: ${urls.head}\")\n运行结果\nOne url: http://blog.toolshed.com","title":"代码清单8-6"},{"location":"chapter-08/index.html#代码清单8-7","text":"println(\"Refresh Feeds:\")\nfeeds1 foreach { feed ⇒ println(s\"  Refreshing $feed...\") }\n运行结果\nRefresh Feeds:\n  Refreshing blog.toolshed.com...\n  Refreshing pragdave.me...\n  Refreshing blog.agiledeveloper.com...","title":"代码清单8-7"},{"location":"chapter-08/index.html#代码清单8-8","text":"val feeds = Map(\n  \"Andy Hunt\" -> \"blog.toolshed.com\",\n  \"Dave Thomas\" -> \"pragdave.me\",\n  \"NFJS\" -> \"nofluffjuststuff.com/blog\")","title":"代码清单8-8"},{"location":"chapter-08/index.html#代码清单8-9","text":"val filterNameStartWithD = feeds filterKeys (_ startsWith \"D\")\nprintln(s\"# of Filtered: ${filterNameStartWithD.size}\")\n运行结果\n# of Filtered: 1","title":"代码清单8-9"},{"location":"chapter-08/index.html#代码清单8-10","text":"val filterNameStartWithDAndPragprogInFeed = feeds filter { element ⇒\n  val (key, value) = element\n  (key startsWith \"D\") && (value contains \"pragprog\")\n}\nprint(\"# of feeds with auth name D* and pragprog in URL: \")\nprintln(filterNameStartWithDAndPragprogInFeed.size)\n运行结果\n# of feeds with auth name D* and pragprog in URL: 1","title":"代码清单8-10"},{"location":"chapter-08/index.html#代码清单8-11","text":"println(s\"Get Andy's Feed: ${feeds.get(\"Andy Hunt\")}\")\nprintln(s\"Get Bill's Feed: ${feeds.get(\"Bill Who\")}\")\n运行结果\nGet Andy's Feed: Some(blog.toolshed.com)\nGet Bill's Feed: None","title":"代码清单8-11"},{"location":"chapter-08/index.html#代码清单8-12","text":"try {\n  println(s\"Get Andy's Feed Using apply(): ${feeds(\"Andy Hunt\")}\")\n  print(\"Get Bill's Feed: \")\n  println(feeds(\"Bill Who\"))\n} catch {\n  case _: java.util.NoSuchElementException ⇒ println(\"Not found\")\n}\n运行结果\nGet Andy's Feed Using apply(): blog.toolshed.com\nGet Bill's Feed: Not found","title":"代码清单8-12"},{"location":"chapter-08/index.html#代码清单8-13","text":"val newFeeds1 = feeds.updated(\"Venkat Subramaniam\", \"blog.agiledeveloper.com\")\nprintln(\"Venkat's blog in original feeds: \" + feeds.get(\"Venkat Subramaniam\"))\nprintln(\"Venkat's blog in new feed: \" + newFeeds1(\"Venkat Subramaniam\"))\n运行结果\nVenkat's blog in original feeds: None\nVenkat's blog in new feed: blog.agiledeveloper.com","title":"代码清单8-13"},{"location":"chapter-08/index.html#代码清单8-14","text":"val mutableFeeds = scala.collection.mutable.Map(\n  \"Scala Book Forum\" -> \"forums.pragprog.com/forums/87\")\nmutableFeeds(\"Groovy Book Forum\") = \"forums.pragprog.com/forums/246\"\nprintln(s\"Number of forums: ${mutableFeeds.size}\")\n运行结果\nNumber of forums: 2","title":"代码清单8-14"},{"location":"chapter-08/index.html#代码清单8-15","text":"val feeds = List(\"blog.toolshed.com\", \"pragdave.me\", \"blog.agiledeveloper.com\")","title":"代码清单8-15"},{"location":"chapter-08/index.html#代码清单8-16","text":"println(s\"First feed: ${feeds.head}\")\nprintln(s\"Second feed: ${feeds(1)}\")\n运行结果\nFirst feed: blog.toolshed.com\nSecond feed: pragdave.me","title":"代码清单8-16"},{"location":"chapter-08/index.html#代码清单8-17","text":"val prefixedList = \"forums.pragprog.com/forums/87\" :: feeds\nprintln(s\"First Feed In Prefixed: ${prefixedList.head}\")\n运行结果\nFirst Feed In Prefixed: forums.pragprog.com/forums/87","title":"代码清单8-17"},{"location":"chapter-08/index.html#代码清单8-18","text":"val feedsWithForums =\n  feeds ::: List(\n    \"forums.pragprog.com/forums/87\",\n    \"forums.pragprog.com/forums/246\")\nprintln(s\"First feed in feeds with forum: ${feedsWithForums.head}\")\nprintln(s\"Last feed in feeds with forum: ${feedsWithForums.last}\")\n运行结果\nFirst feed in feeds with forum: blog.toolshed.com\nLast feed in feeds with forum: forums.pragprog.com/forums/246","title":"代码清单8-18"},{"location":"chapter-08/index.html#代码清单8-19","text":"val appendedList = feeds ::: List(\"agilelearner.com\")\nprintln(s\"Last Feed In Appended: ${appendedList.last}\")\n运行结果\nLast Feed In Appended: agilelearner.com","title":"代码清单8-19"},{"location":"chapter-08/index.html#代码清单8-20","text":"println(s\"Feeds with blog: ${feeds.filter(_ contains \"blog\").mkString(\", \")}\")\nprintln(s\"All feeds have com: ${feeds.forall(_ contains \"com\")}\")\nprintln(s\"All feeds have dave: ${feeds.forall(_ contains \"dave\")}\")\nprintln(s\"Any feed has dave: ${feeds.exists(_ contains \"dave\")}\")\nprintln(s\"Any feed has bill: ${feeds.exists(_ contains \"bill\")}\")\n运行结果\nFeeds with blog: blog.toolshed.com, blog.agiledeveloper.com\nAll feeds have com: true\nAll feeds have dave: false\nAny feed has dave: true\nAny feed has bill: false","title":"代码清单8-20"},{"location":"chapter-08/index.html#代码清单8-21","text":"println(s\"Feed url lengths: ${feeds.map(_.length).mkString(\", \")}\")\n运行结果\nFeed url lengths: 17, 21, 23","title":"代码清单8-21"},{"location":"chapter-08/index.html#代码清单8-22","text":"val total = feeds.foldLeft(0) { (total, feed) ⇒ total + feed.length }\nprintln(s\"Total length of feed urls: $total\")\n运行结果\nTotal length of feed urls: 61","title":"代码清单8-22"},{"location":"chapter-08/index.html#代码清单8-23","text":"val total2 = (0 /: feeds) { (total, feed) ⇒ total + feed.length }\nprintln(s\"Total length of feed urls: $total2\")\n运行结果\nTotal length of feed urls: 61","title":"代码清单8-23"},{"location":"chapter-08/index.html#代码清单8-24","text":"val total3 = (0 /: feeds) { _ + _.length }\nprintln(s\"Total length of feed urls: $total3\")\n运行结果\nTotal length of feed urls: 61","title":"代码清单8-24"},{"location":"chapter-08/index.html#代码清单8-25","text":"class Cow {\n  def ^(moon: Moon): Unit = println(\"Cow jumped over the moon\")\n}\nclass Moon {\n  def ^:(cow: Cow): Unit = println(\"This cow jumped over the moon too\")\n}","title":"代码清单8-25"},{"location":"chapter-08/index.html#代码清单8-26","text":"val cow = new Cow\nval moon = new Moon\n\ncow ^ moon\ncow ^: moon\n运行结果\nCow jumped over the moon\nThis cow jumped over the moon too","title":"代码清单8-26"},{"location":"chapter-08/index.html#代码清单8-27","text":"class Sample {\n  def unary_+(): Unit = println(\"Called unary +\")\n  def unary_-(): Unit = println(\"called unary -\")\n  def unary_!(): Unit = println(\"called unary !\")\n  def unary_~(): Unit = println(\"called unary ~\")\n}\n\nval sample = new Sample\n+sample\n-sample\n!sample\n~sample\n运行结果\nCalled unary +\ncalled unary -\ncalled unary !\ncalled unary ~","title":"代码清单8-27"},{"location":"chapter-08/index.html#代码清单8-28","text":"for (_ ← 1 to 3) { print(\"ho \") }","title":"代码清单8-28"},{"location":"chapter-08/index.html#代码清单8-29","text":"val result = for (i ← 1 to 10)\n  yield i * 2","title":"代码清单8-29"},{"location":"chapter-08/index.html#代码清单8-30","text":"val result2 = (1 to 10).map(_ * 2)","title":"代码清单8-30"},{"location":"chapter-08/index.html#代码清单8-31","text":"val doubleEven = for (i ← 1 to 10; if i % 2 == 0)\n  yield i * 2","title":"代码清单8-31"},{"location":"chapter-08/index.html#代码清单8-32","text":"for {\n  i ← 1 to 10\n  if i % 2 == 0\n} yield i * 2","title":"代码清单8-32"},{"location":"chapter-08/index.html#代码清单8-33","text":"class Person(val firstName: String, val lastName: String)\nobject Person {\n  def apply(firstName: String, lastName: String): Person =\n    new Person(firstName, lastName)\n}\nval friends = List(Person(\"Brian\", \"Sletten\"), Person(\"Neal\", \"Ford\"),\n  Person(\"Scott\", \"Davis\"), Person(\"Stuart\", \"Halloway\"))\n\nval lastNames =\n  for (friend ← friends; lastName = friend.lastName) yield lastName\n\nprintln(lastNames.mkString(\", \"))\n运行结果\nSletten, Ford, Davis, Halloway","title":"代码清单8-33"},{"location":"chapter-08/index.html#代码清单8-34","text":"for (i ← 1 to 3; j ← 4 to 6) {\n  print(s\"[$i,$j] \")\n}\n运行结果\n[1,4] [1,5] [1,6] [2,4] [2,5] [2,6] [3,4] [3,5] [3,6]","title":"代码清单8-34"},{"location":"chapter-09/index.html","text":"","title":"第9章——模式匹配和正则表达式 ·"},{"location":"chapter-09/index.html#第9章-模式匹配和正则表达式","text":"","title":"第9章——模式匹配和正则表达式"},{"location":"chapter-09/index.html#代码清单9-1","text":"def activity(day: String) {\n  day match {\n    case \"Sunday\"   ⇒ print(\"Eat, sleep, repeat... \")\n    case \"Saturday\" ⇒ print(\"Hang out with friends... \")\n    case \"Monday\"   ⇒ print(\"...code for fun...\")\n    case \"Friday\"   ⇒ print(\"...read a good book...\")\n  }\n}\nList(\"Monday\", \"Sunday\", \"Saturday\").foreach { activity }\n运行结果\n...code for fun...Eat, sleep, repeat... Hang out with friends...","title":"代码清单9-1"},{"location":"chapter-09/index.html#代码清单9-2","text":"object DayOfWeek extends Enumeration {\n  val SUNDAY = Value(\"Sunday\")\n  val MONDAY = Value(\"Monday\")\n  val TUESDAY = Value(\"Tuesday\")\n  val WEDNESDAY = Value(\"Wednesday\")\n  val THURSDAY = Value(\"Thursday\")\n  val FRIDAY = Value(\"Friday\")\n  val SATURDAY = Value(\"Saturday\")\n}\n\ndef activity(day: DayOfWeek.Value) {\n  day match {\n    case DayOfWeek.SUNDAY   ⇒ println(\"Eat, sleep, repeat...\")\n    case DayOfWeek.SATURDAY ⇒ println(\"Hang out with friends\")\n    case _                  ⇒ println(\"...code for fun...\")\n  }\n}\n\nactivity(DayOfWeek.SATURDAY)\nactivity(DayOfWeek.MONDAY)\n运行结果\nHang out with friends\n...code for fun...","title":"代码清单9-2"},{"location":"chapter-09/index.html#代码清单9-3","text":"def processCoordinates(input: Any) {\n  input match {\n    case (lat, long) ⇒ printf(\"Processing (%d, %d)...\", lat, long)\n    case \"done\"      ⇒ println(\"done\")\n    case _           ⇒ println(\"invalid input\")\n  }\n}\n\nprocessCoordinates((39, -104))\nprocessCoordinates(\"done\")\n运行结果\nProcessing (39, -104)...done","title":"代码清单9-3"},{"location":"chapter-09/index.html#代码清单9-4","text":"def processItems(items: List[String]) {\n  items match {\n    case List(\"apple\", \"ibm\")         ⇒ println(\"Apples and IBMs\")\n    case List(\"red\", \"blue\", \"white\") ⇒ println(\"Stars and Stripes...\")\n    case List(\"red\", \"blue\", _*)      ⇒ println(\"colors red, blue,... \")\n    case List(\"apple\", \"orange\", otherFruits @ _*) ⇒\n      println(\"apples, oranges, and \" + otherFruits)\n  }\n}\n\nprocessItems(List(\"apple\", \"ibm\"))\nprocessItems(List(\"red\", \"blue\", \"green\"))\nprocessItems(List(\"red\", \"blue\", \"white\"))\nprocessItems(List(\"apple\", \"orange\", \"grapes\", \"dates\"))\n运行结果\nApples and IBMs\ncolors red, blue,... \nStars and Stripes...\napples, oranges, and List(grapes, dates)","title":"代码清单9-4"},{"location":"chapter-09/index.html#代码清单9-5","text":"def process(input: Any) {\n  input match {\n    case (_: Int, _: Int)          ⇒ print(\"Processing (int, int)... \")\n    case (_: Double, _: Double)    ⇒ print(\"Processing (double, double)... \")\n    case msg: Int if msg > 1000000 ⇒ println(\"Processing int > 1000000\")\n    case _: Int                    ⇒ print(\"Processing int... \")\n    case _: String                 ⇒ println(\"Processing string... \")\n    case _                         ⇒ printf(s\"Can't handle $input... \")\n  }\n}\n\nprocess((34.2, -159.3))\nprocess(0)\nprocess(1000001)\nprocess(2.2)\n运行结果\nProcessing (double, double)... Processing int... Processing int > 1000000\nCan't handle 2.2...","title":"代码清单9-5"},{"location":"chapter-09/index.html#代码清单9-6","text":"class Sample {\n  val max = 100\n\n  def process(input: Int) {\n    input match {\n      case max ⇒ println(s\"You matched max $max\")\n    }\n  }\n}\n\nval sample = new Sample\ntry {\n  sample.process(0)\n} catch {\n  case ex: Throwable ⇒ println(ex)\n}\nsample.process(100)\n运行结果\nYou matched max 0\nYou matched max 100","title":"代码清单9-6"},{"location":"chapter-09/index.html#代码清单9-7","text":"class Sample {\n  val MAX = 100\n\n  def process(input: Int) {\n    input match {\n      case MAX ⇒ println(\"You matched max\")\n    }\n  }\n}\n\nval sample = new Sample\ntry {\n  sample.process(0)\n} catch {\n  case ex: Throwable ⇒ println(ex)\n}\nsample.process(100)\n运行结果\nscala.MatchError: 0 (of class java.lang.Integer)\nYou matched max","title":"代码清单9-7"},{"location":"chapter-09/index.html#代码清单9-8","text":"trait Trade\ncase class Sell(stockSymbol: String, quantity: Int) extends Trade\ncase class Buy(stockSymbol: String, quantity: Int) extends Trade\ncase class Hedge(stockSymbol: String, quantity: Int) extends Trade","title":"代码清单9-8"},{"location":"chapter-09/index.html#代码清单9-9","text":"object TradeProcessor {\n  def processTransaction(request: Trade) {\n    request match {\n      case Sell(stock, 1000) ⇒ println(s\"Selling 1000-units of $stock\")\n      case Sell(stock, quantity) ⇒\n        println(s\"Selling $quantity units of $stock\")\n      case Buy(stock, quantity) if quantity > 2000 ⇒\n        println(s\"Buying $quantity (large) units of $stock\")\n      case Buy(stock, quantity) ⇒\n        println(s\"Buying $quantity units of $stock\")\n    }\n  }\n}","title":"代码清单9-9"},{"location":"chapter-09/index.html#代码清单9-10","text":"TradeProcessor.processTransaction(Sell(\"GOOG\", 500))\nTradeProcessor.processTransaction(Buy(\"GOOG\", 700))\nTradeProcessor.processTransaction(Sell(\"GOOG\", 1000))\nTradeProcessor.processTransaction(Buy(\"GOOG\", 3000))\n运行结果\nSelling 500 units of GOOG\nBuying 700 units of GOOG\nSelling 1000-units of GOOG\nBuying 3000 (large) units of GOOG","title":"代码清单9-10"},{"location":"chapter-09/index.html#代码清单9-11","text":"case class Apple()\ncase class Orange()\ncase class Book()\n\nobject ThingsAcceptor {\n  def acceptStuff(thing: Any) {\n    thing match {\n      case Apple()  ⇒ println(\"Thanks for the Apple\")\n      case Orange() ⇒ println(\"Thanks for the Orange\")\n      case Book()   ⇒ println(\"Thanks for the Book\")\n      case _        ⇒ println(s\"Excuse me, why did you send me $thing\")\n    }\n  }\n}","title":"代码清单9-11"},{"location":"chapter-09/index.html#代码清单9-12","text":"ThingsAcceptor.acceptStuff(Apple())\nThingsAcceptor.acceptStuff(Book())\nThingsAcceptor.acceptStuff(Apple)\n运行结果\nThanks for the Apple\nThanks for the Book\nExcuse me, why did you send me Apple","title":"代码清单9-12"},{"location":"chapter-09/index.html#代码清单9-13","text":"abstract class Thing\ncase class Apple() extends Thing\n\nobject ThingsAcceptor {\n  def acceptStuff(thing: Thing) {\n    thing match {\n      //...\n      case _ ⇒\n    }\n  }\n}\n\nThingsAcceptor.acceptStuff(Apple) //error: type mismatch;","title":"代码清单9-13"},{"location":"chapter-09/index.html#代码清单9-14","text":"StockService process \"GOOG\"\nStockService process \"IBM\"\nStockService process \"ERR\"","title":"代码清单9-14"},{"location":"chapter-09/index.html#代码清单9-15","text":"object StockService {\n  def process(input: String) {\n    input match {\n      case Symbol() ⇒ println(s\"Look up price for valid symbol $input\")\n      case _        ⇒ println(s\"Invalid input $input\")\n    }\n  }\n}","title":"代码清单9-15"},{"location":"chapter-09/index.html#代码清单9-16","text":"object Symbol {\n  def unapply(symbol: String): Boolean = {\n    // you'd look up a database... here only GOOG and IBM are recognized\n    symbol == \"GOOG\" || symbol == \"IBM\"\n  }\n}\n运行结果\nLook up price for valid symbol GOOG\nLook up price for valid symbol IBM\nInvalid input ERR","title":"代码清单9-16"},{"location":"chapter-09/index.html#代码清单9-17","text":"object StockService {\n  def process(input: String) {\n    input match {\n      case Symbol() ⇒ println(s\"Look up price for valid symbol $input\")\n      case ReceiveStockPrice(symbol, price) ⇒\n        println(s\"Received price $$$price for symbol $symbol\")\n      case _ ⇒ println(s\"Invalid input $input\")\n    }\n  }\n}","title":"代码清单9-17"},{"location":"chapter-09/index.html#代码清单9-18","text":"object ReceiveStockPrice {\n  def unapply(input: String): Option[(String, Double)] = {\n    try {\n      if (input contains \":\") {\n        val splitQuote = input split \":\"\n        Some((splitQuote(0), splitQuote(1).toDouble))\n      } else {\n        None\n      }\n    } catch {\n      case _: NumberFormatException ⇒ None\n    }\n  }\n}","title":"代码清单9-18"},{"location":"chapter-09/index.html#代码清单9-19","text":"StockService process \"GOOG\"\nStockService process \"GOOG:310.84\"\nStockService process \"GOOG:BUY\"\nStockService process \"ERR:12.21\"\n运行结果\nLook up price for valid symbol GOOG\nReceived price $310.84 for symbol GOOG\nInvalid input GOOG:BUY\nReceived price $12.21 for symbol ERR","title":"代码清单9-19"},{"location":"chapter-09/index.html#代码清单9-20","text":"case ReceiveStockPrice(symbol @ Symbol(), price) ⇒\n  println(s\"Received price $$$price for symbol $symbol\")\n运行结果\nLook up price for valid symbol GOOG\nReceived price $310.84 for symbol GOOG\nInvalid input GOOG:BUY\nInvalid input ERR:12.21","title":"代码清单9-20"},{"location":"chapter-09/index.html#代码清单9-21","text":"val pattern = \"(S|s)cala\".r\nval str = \"Scala is scalable and cool\"\nprintln(pattern findFirstIn str)","title":"代码清单9-21"},{"location":"chapter-09/index.html#代码清单9-22","text":"println((pattern findAllIn str).mkString(\", \"))","title":"代码清单9-22"},{"location":"chapter-09/index.html#代码清单9-23","text":"println(\"cool\".r replaceFirstIn (str, \"awesome\"))\n运行结果\nSome(Scala)\nScala, scala\nScala is scalable and awesome","title":"代码清单9-23"},{"location":"chapter-09/index.html#代码清单9-24","text":"def process(input: String) {\n  val GoogStock = \"\"\"^GOOG:(\\d*\\.\\d+)\"\"\".r\n  input match {\n    case GoogStock(price) ⇒ println(s\"Price of GOOG is $$$price\")\n    case _                ⇒ println(s\"not processing $input\")\n  }\n}\nprocess(\"GOOG:310.84\")\nprocess(\"GOOG:310\")\nprocess(\"IBM:84.01\")\n运行结果\nPrice of GOOG is $310.84\nnot processing GOOG:310\nnot processing IBM:84.01","title":"代码清单9-24"},{"location":"chapter-09/index.html#代码清单9-25","text":"def process(input: String) {\n  val MatchStock = \"\"\"^(.+):(\\d*\\.\\d+)\"\"\".r\n  input match {\n    case MatchStock(\"GOOG\", price) ⇒ println(s\"We got GOOG at $$$price\")\n    case MatchStock(\"IBM\", price)  ⇒ println(s\"IBM's trading at $$$price\")\n    case MatchStock(symbol, price) ⇒ println(s\"Price of $symbol is $$$price\")\n    case _                         ⇒ println(s\"not processing $input\")\n  }\n}\nprocess(\"GOOG:310.84\")\nprocess(\"IBM:84.01\")\nprocess(\"GE:15.96\")\n运行结果\nWe got GOOG at $310.84\nIBM's trading at $84.01\nPrice of GE is $15.96","title":"代码清单9-25"},{"location":"chapter-10/index.html","text":"","title":"第10章——处理异常 ·"},{"location":"chapter-10/index.html#第10章-处理异常","text":"","title":"第10章——处理异常"},{"location":"chapter-10/index.html#代码清单10-1","text":"throw new IllegalArgumentException","title":"代码清单10-1"},{"location":"chapter-10/index.html#代码清单10-2","text":"// Java code\ntry {\n  Thread.sleep(1000);\n}                    \ncatch(InterruptedException ex) {\n  // Losing sleep over what to do here?\n}","title":"代码清单10-2"},{"location":"chapter-10/index.html#代码清单10-3","text":"object Tax {\n  def taxFor(amount: Double): Double = {\n    if (amount < 0)\n      throw new IllegalArgumentException(\"Amount must be greater than zero\")\n\n    if (amount < 0.01)\n      throw new RuntimeException(\"Amount too small to be taxed\")\n\n    if (amount > 1000000) throw new Exception(\"Amount too large...\")\n\n    amount * 0.08\n  }\n}","title":"代码清单10-3"},{"location":"chapter-10/index.html#代码清单10-4","text":"for (amount ← List(100.0, 0.009, -2.0, 1000001.0)) {\n  try {\n    print(s\"Amount: $$$amount \")\n    println(s\"Tax: $$${Tax.taxFor(amount)}\")\n  } catch {\n    case ex: IllegalArgumentException ⇒ println(ex.getMessage)\n    case ex: RuntimeException ⇒\n      // if you need a block of code to handle exception\n      println(s\"Don't bother reporting...${ex.getMessage}\")\n  }\n}\n运行结果\nAmount: $100.0 Tax: $8.0\nAmount: $0.009 Don't bother reporting...Amount too small to be taxed\nAmount: $-2.0 Amount must be greater than zero\nAmount: $1000001.0 java.lang.Exception: Amount too large...\n\tat Tax$.taxFor(Tax.scala:9)\n...","title":"代码清单10-4"},{"location":"chapter-10/index.html#代码清单10-5","text":"for (amount ← List(100.0, 0.009, -2.0, 1000001.0)) {\n  try {\n    print(s\"Amount: $$$amount \")\n    println(s\"Tax: $$${Tax.taxFor(amount)}\")\n  } catch {\n    case ex: IllegalArgumentException ⇒ println(ex.getMessage)\n    case _: Throwable                 ⇒ println(\"Something went wrong\")\n  }\n}\n运行结果\nAmount: $100.0 Tax: $8.0\nAmount: $0.009 Something went wrong\nAmount: $-2.0 Amount must be greater than zero\nAmount: $1000001.0 Something went wrong","title":"代码清单10-5"},{"location":"chapter-10/index.html#代码清单10-6","text":"//Java code—will not compile due to incorrect catch order\npublic class JavaCatchOrder {\n  public void catchOrderExample() {\n    try {\n      String str = \"hello\";\n      System.out.println(str.charAt(31));\n    }\n    catch(Exception ex) { System.out.println(\"Exception caught\"); }\n    catch(StringIndexOutOfBoundsException ex) { //ERROR\n      System.out.println(\"Invalid Index\"); }\n  }\n}\n运行结果\nJavaCatchOrder.java:10: error: exception StringIndexOutOfBoundsException\nhas already been caught\n    catch(StringIndexOutOfBoundsException ex) { //ERROR\n    ^\n1 error","title":"代码清单10-6"},{"location":"chapter-10/index.html#代码清单10-6","text":"val amount = -2\ntry {\n  print(s\"Amount: $$$amount \")\n  println(s\"Tax: $$${Tax.taxFor(amount)}\")\n} catch {\n  case _: Exception                 ⇒ println(\"Something went wrong\")\n  case ex: IllegalArgumentException ⇒ println(ex.getMessage)\n}\n运行结果\nAmount: $-2 Something went wrong","title":"代码清单10-6"},{"location":"chapter-11/index.html","text":"","title":"第11章——递归编程 ·"},{"location":"chapter-11/index.html#第11章-递归编程","text":"","title":"第11章——递归编程"},{"location":"chapter-11/index.html#代码清单11-1-programmingrecursions-factorial-scala-","text":"def factorial(number: Int): BigInt = {\n  if (number == 0)\n    1\n  else\n    number * factorial(number - 1)\n}","title":"代码清单11-1（ProgrammingRecursions/factorial.scala）"},{"location":"chapter-12/index.html","text":"","title":"第12章——惰性求值和并行集合 ·"},{"location":"chapter-12/index.html#第12章-惰性求值和并行集合","text":"","title":"第12章——惰性求值和并行集合"},{"location":"chapter-12/index.html#代码清单12-1","text":"def expensiveComputation() = {\n  println(\"...assume slow operation...\")\n  false\n}\n\ndef evaluate(input: Int): Unit = {\n  println(s\"evaluate called with $input\")\n  if (input >= 10 && expensiveComputation())\n    println(\"doing work...\")\n  else\n    println(\"skipping\")\n}\n\nevaluate(0)\nevaluate(100)\n运行结果\nevaluate called with 0\nskipping\nevaluate called with 100\n...assume slow operation...\nskipping","title":"代码清单12-1"},{"location":"chapter-12/index.html#代码清单12-2","text":"val perform = expensiveComputation()\nif (input >= 10 && perform)\n运行结果\nevaluate called with 0\n...assume slow operation...\nskipping\nevaluate called with 100\n...assume slow operation...\nskipping","title":"代码清单12-2"},{"location":"chapter-12/index.html#代码清单12-3","text":"lazy val perform = expensiveComputation()\nif (input >= 10 && perform)\n  println(\"doing work...\")\n运行结果\nevaluate called with 0\nskipping\nevaluate called with 100\n...assume slow operation...\nskipping","title":"代码清单12-3"},{"location":"chapter-12/index.html#代码清单12-4","text":"import scala.io._\n\ndef read = StdIn.readInt()\n\nlazy val first = read\nlazy val second = read\n\nif (Math.random() < 0.5)\n  second\n\nprintln(first - second)\n运行结果\n> scala lazyOrder.scala\n1\n2\n1\n> scala lazyOrder.scala \n1\n2\n-1\n>","title":"代码清单12-4"},{"location":"chapter-12/index.html#代码清单12-5","text":"val people = List((\"Mark\", 32), (\"Bob\", 22), (\"Jane\", 8), (\"Jill\", 21),\n  (\"Nick\", 50), (\"Nancy\", 42), (\"Mike\", 19), (\"Sara\", 12), (\"Paula\", 42),\n  (\"John\", 21))\n\ndef isOlderThan17(person: (String, Int)) = {\n  println(s\"isOlderThan17 called for $person\")\n  val (_, age) = person\n  age > 17\n}\n\ndef isNameStartsWithJ(person: (String, Int)) = {\n  println(s\"isNameStartsWithJ called for $person\")\n  val (name, _) = person\n  name.startsWith(\"J\")\n}\n\nprintln(people.filter { isOlderThan17 }.filter { isNameStartsWithJ }.head)\n运行结果\nisOlderThan17 called for (Mark,32)\nisOlderThan17 called for (Bob,22)\nisOlderThan17 called for (Jane,8)\nisOlderThan17 called for (Jill,21)\nisOlderThan17 called for (Nick,50)\nisOlderThan17 called for (Nancy,42)\nisOlderThan17 called for (Mike,19)\nisOlderThan17 called for (Sara,12)\nisOlderThan17 called for (Paula,42)\nisOlderThan17 called for (John,21)\nisNameStartsWithJ called for (Mark,32)\nisNameStartsWithJ called for (Bob,22)\nisNameStartsWithJ called for (Jill,21)\nisNameStartsWithJ called for (Nick,50)\nisNameStartsWithJ called for (Nancy,42)\nisNameStartsWithJ called for (Mike,19)\nisNameStartsWithJ called for (Paula,42)\nisNameStartsWithJ called for (John,21)\n(Jill,21)","title":"代码清单12-5"},{"location":"chapter-12/index.html#代码清单12-6","text":"println(people.view.filter { isOlderThan17 }.filter { isNameStartsWithJ }.head)\n运行结果\nisOlderThan17 called for (Mark,32)\nisNameStartsWithJ called for (Mark,32)\nisOlderThan17 called for (Bob,22)\nisNameStartsWithJ called for (Bob,22)\nisOlderThan17 called for (Jane,8)\nisOlderThan17 called for (Jill,21)\nisNameStartsWithJ called for (Jill,21)\n(Jill,21)","title":"代码清单12-6"},{"location":"chapter-12/index.html#代码清单12-7","text":"def generate(starting: Int): Stream[Int] = {\n  starting #:: generate(starting + 1)\n}\n\nprintln(generate(25))\n运行结果\nStream(25, ?)","title":"代码清单12-7"},{"location":"chapter-12/index.html#代码清单12-8","text":"println(generate(25).take(10).force)\nprintln(generate(25).take(10).toList)\n运行结果\nStream(25, 26, 27, 28, 29, 30, 31, 32, 33, 34)\nList(25, 26, 27, 28, 29, 30, 31, 32, 33, 34)","title":"代码清单12-8"},{"location":"chapter-12/index.html#代码清单12-9","text":"println(generate(25).takeWhile { _ < 40 }.force)\n运行结果\nStream(25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39)","title":"代码清单12-9"},{"location":"chapter-12/index.html#代码清单12-10","text":"def isDivisibleBy(number: Int, divisor: Int) = number % divisor == 0\n\ndef isPrime(number: Int) =\n  number > 1 && !(2 until number).exists { isDivisibleBy(number, _) }\n\ndef primes(starting: Int): Stream[Int] = {\n  println(s\"computing for $starting\")\n  if (isPrime(starting))\n    starting #:: primes(starting + 1)\n  else\n    primes(starting + 1)\n}","title":"代码清单12-10"},{"location":"chapter-12/index.html#代码清单12-11","text":"val primesFrom100 = primes(100)\n\nprintln(primesFrom100.take(3).toList)\nprintln(\"Let's ask for more...\")\nprintln(primesFrom100.take(4).toList)\n运行结果\ncomputing for 100\ncomputing for 101\ncomputing for 102\ncomputing for 103\ncomputing for 104\ncomputing for 105\ncomputing for 106\ncomputing for 107\nList(101, 103, 107)\nLet's ask for more...\ncomputing for 108\ncomputing for 109\nList(101, 103, 107, 109)","title":"代码清单12-11"},{"location":"chapter-12/index.html#代码清单12-12","text":"import scala.io.Source\nimport scala.xml._\n\ndef getWeatherData(city: String) = {\n  val url = \"http://api.openweathermap.org/data/2.5/weather\"\n\n  val response = Source.fromURL(s\"$url?q=$city&units=imperial&mode=xml\")\n  val xmlResponse = XML.loadString(response.mkString)\n  val cityName = (xmlResponse \\\\ \"city\" \\ \"@name\").text\n  val temperature = (xmlResponse \\\\ \"temperature\" \\ \"@value\").text\n  val condition = (xmlResponse \\\\ \"weather\" \\ \"@value\").text\n  (cityName, temperature, condition)\n}","title":"代码清单12-12"},{"location":"chapter-12/index.html#代码清单12-13","text":"def printWeatherData(weatherData: (String, String, String)): Unit = {\n  val (cityName, temperature, condition) = weatherData\n\n  println(f\"$cityName%-15s $temperature%-6s $condition\")\n}","title":"代码清单12-13"},{"location":"chapter-12/index.html#代码清单12-14","text":"def timeSample(getData: List[String] ⇒ List[(String, String, String)]): Unit = {\n  val cities = List(\"Houston,us\", \"Chicago,us\", \"Boston,us\", \"Minneapolis,us\",\n    \"Oslo,norway\", \"Tromso,norway\", \"Sydney,australia\", \"Berlin,germany\",\n    \"London,uk\", \"Krakow,poland\", \"Rome,italy\", \"Stockholm,sweden\",\n    \"Bangalore,india\", \"Brussels,belgium\", \"Reykjavik,iceland\")\n\n  val start = System.nanoTime\n  getData(cities) sortBy { _._1 } foreach printWeatherData\n  val end = System.nanoTime\n  println(s\"Time taken: ${(end - start) / 1.0e9} sec\")\n}\n运行结果\nBengaluru       84.2   few clouds\nBerlin          45.63  broken clouds\nBoston          52.23  scattered clouds\nBrussels        50.83  Sky is Clear\nChicago         46.13  sky is clear\nCracow          40.39  moderate rain\nHouston         54.01  light intensity drizzle\nLondon          55.33  Sky is Clear\nMinneapolis     42.82  sky is clear\nOslo            47.3   Sky is Clear\nReykjavik       31.17  proximity shower rain\nRome            58.42  few clouds\nStockholm       47.28  Sky is Clear\nSydney          68.9   Sky is Clear\nTromso          35.6   proximity shower rain\nTime taken: 67.208944087 sec","title":"代码清单12-14"},{"location":"chapter-12/index.html#代码清单12-15","text":"timeSample { cities ⇒ cities map getWeatherData }\n运行结果\nBengaluru       84.2   few clouds\nBerlin          45.63  broken clouds\nBoston          52.23  scattered clouds\nBrussels        50.83  Sky is Clear\nChicago         46.13  sky is clear\nCracow          40.39  moderate rain\nHouston         54.01  light intensity drizzle\nLondon          55.33  Sky is Clear\nMinneapolis     42.82  sky is clear\nOslo            47.3   Sky is Clear\nReykjavik       31.17  proximity shower rain\nRome            58.42  few clouds\nStockholm       47.28  Sky is Clear\nSydney          68.9   Sky is Clear\nTromso          35.6   proximity shower rain\nTime taken: 0.171599394 sec","title":"代码清单12-15"},{"location":"chapter-13/index.html","text":"","title":"第13章——使用Actor模型处理并发 ·"},{"location":"chapter-13/index.html#第13章-使用actor模型处理并发","text":"","title":"第13章——使用Actor模型处理并发"},{"location":"chapter-13/index.html#代码清单13-1-programmingactors-countfilessequential-scala-","text":"import java.io.File\n\ndef getChildren(file: File) = {\n  val children = file.listFiles()\n  if (children != null) children.toList else List()\n}\n\nval start = System.nanoTime\nval exploreFrom = new File(args(0))\n\nvar count = 0L\nvar filesToVisit = List(exploreFrom)\n\nwhile (filesToVisit.size > 0) {\n  val head = filesToVisit.head\n  filesToVisit = filesToVisit.tail\n\n  val children = getChildren(head)\n  count = count + children.count { !_.isDirectory }\n  filesToVisit = filesToVisit ::: children.filter { _.isDirectory }\n}\n\nval end = System.nanoTime\nprintln(s\"Number of files found: $count\")\nprintln(s\"Time taken: ${(end - start) / 1.0e9} seconds\")","title":"代码清单13-1（ProgrammingActors/countFilesSequential.scala）"},{"location":"chapter-14/index.html","text":"","title":"第14章——和Java进行互操作 ·"},{"location":"chapter-14/index.html#第14章-和java进行互操作","text":"","title":"第14章——和Java进行互操作"},{"location":"chapter-14/index.html#代码清单14-1-intermixing-person-scala-","text":"class Person(val firstName: String, val lastName: String) {\n  override def toString: String = firstName + \" \" + lastName\n}","title":"代码清单14-1（Intermixing/Person.scala）"},{"location":"chapter-15/index.html","text":"","title":"第15章——使用Scala创建应用程序 ·"},{"location":"chapter-15/index.html#第15章-使用scala创建应用程序","text":"","title":"第15章——使用Scala创建应用程序"},{"location":"chapter-15/index.html#代码清单15-1-usingscala-consoleinput-scala-","text":"import scala.io._\n\nprint(\"Please enter a ticker symbol:\")\nval symbol = StdIn.readLine()\nprintln(s\"OK, got it, you own $symbol\")","title":"代码清单15-1（UsingScala/ConsoleInput.scala）"},{"location":"chapter-16/index.html","text":"","title":"第16章——单元测试 ·"},{"location":"chapter-16/index.html#第16章-单元测试","text":"","title":"第16章——单元测试"},{"location":"chapter-16/index.html#代码清单16-1-unittesting-usingjunit-scala-","text":"import java.util\n\nimport org.junit.Assert._\nimport org.junit.Test\n\nclass UsingJUnit {\n  @Test\n  def listAdd() {\n    val list = new util.ArrayList[String]\n    list.add(\"Milk\")\n    list add \"Sugar\"\n    assertEquals(2, list.size)\n  }\n}","title":"代码清单16-1（UnitTesting/UsingJUnit.scala）"},{"location":"appendix-02/index.html","text":"","title":"附录 2"},{"location":"appendix-02/index.html#附录-2","text":"TODO","title":"附录 2"}]}